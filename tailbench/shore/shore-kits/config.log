This file contains any messages produced by compilers while
running configure, to aid debugging if configure makes a mistake.

It was created by THIS_IS_SHORE_KITS configure 2.1, which was
generated by GNU Autoconf 2.71.  Invocation command line was

  $ ./configure --enable-shore6 --enable-dbgsymbols SHORE_HOME=../shore-mt/ 'CXXFLAGS=-std=c++98 -g' --no-create --no-recursion

## --------- ##
## Platform. ##
## --------- ##

hostname = galaxy03-mars
uname -m = x86_64
uname -r = 6.14.0-rc5+
uname -s = Linux
uname -v = #1 SMP PREEMPT_DYNAMIC Tue Aug 12 11:34:15 CST 2025

/usr/bin/uname -p = x86_64
/bin/uname -X     = unknown

/bin/arch              = x86_64
/usr/bin/arch -k       = unknown
/usr/convex/getsysinfo = unknown
/usr/bin/hostinfo      = unknown
/bin/machine           = unknown
/usr/bin/oslevel       = unknown
/bin/universe          = unknown

PATH: /usr/local/sbin/
PATH: /usr/local/bin/
PATH: /usr/sbin/
PATH: /usr/bin/
PATH: /sbin/
PATH: /bin/
PATH: /snap/bin/


## ----------- ##
## Core tests. ##
## ----------- ##

configure:2086: looking for aux files: missing install-sh config.guess config.sub
configure:2099:  trying ./
configure:2128:   ./missing found
configure:2110:   ./install-sh found
configure:2128:   ./config.guess found
configure:2128:   ./config.sub found
configure:2266: checking build system type
configure:2281: result: x86_64-pc-linux-gnu
configure:2301: checking host system type
configure:2315: result: x86_64-pc-linux-gnu
configure:2335: checking target system type
configure:2349: result: x86_64-pc-linux-gnu
configure:2393: checking for a BSD-compatible install
configure:2466: result: /usr/bin/install -c
configure:2477: checking whether build environment is sane
configure:2532: result: yes
configure:2691: checking for a race-free mkdir -p
configure:2735: result: /usr/bin/mkdir -p
configure:2742: checking for gawk
configure:2763: found /usr/bin/gawk
configure:2774: result: gawk
configure:2785: checking whether make sets $(MAKE)
configure:2808: result: yes
configure:2838: checking whether make supports nested variables
configure:2856: result: yes
configure:3063: checking for g++
configure:3084: found /usr/bin/g++
configure:3095: result: g++
configure:3122: checking for C++ compiler version
configure:3131: g++ --version >&5
g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0
Copyright (C) 2023 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

configure:3142: $? = 0
configure:3131: g++ -v >&5
Using built-in specs.
COLLECT_GCC=g++
COLLECT_LTO_WRAPPER=/usr/libexec/gcc/x86_64-linux-gnu/13/lto-wrapper
OFFLOAD_TARGET_NAMES=nvptx-none:amdgcn-amdhsa
OFFLOAD_TARGET_DEFAULT=1
Target: x86_64-linux-gnu
Configured with: ../src/configure -v --with-pkgversion='Ubuntu 13.3.0-6ubuntu2~24.04' --with-bugurl=file:///usr/share/doc/gcc-13/README.Bugs --enable-languages=c,ada,c++,go,d,fortran,objc,obj-c++,m2 --prefix=/usr --with-gcc-major-version-only --program-suffix=-13 --program-prefix=x86_64-linux-gnu- --enable-shared --enable-linker-build-id --libexecdir=/usr/libexec --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --enable-bootstrap --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-libstdcxx-backtrace --enable-gnu-unique-object --disable-vtable-verify --enable-plugin --enable-default-pie --with-system-zlib --enable-libphobos-checking=release --with-target-system-zlib=auto --enable-objc-gc=auto --enable-multiarch --disable-werror --enable-cet --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-offload-targets=nvptx-none=/build/gcc-13-fG75Ri/gcc-13-13.3.0/debian/tmp-nvptx/usr,amdgcn-amdhsa=/build/gcc-13-fG75Ri/gcc-13-13.3.0/debian/tmp-gcn/usr --enable-offload-defaulted --without-cuda-driver --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu --with-build-config=bootstrap-lto-lean --enable-link-serialization=2
Thread model: posix
Supported LTO compression algorithms: zlib zstd
gcc version 13.3.0 (Ubuntu 13.3.0-6ubuntu2~24.04) 
... rest of stderr output deleted ...
configure:3142: $? = 0
configure:3131: g++ -V >&5
g++: error: unrecognized command-line option '-V'
g++: fatal error: no input files
compilation terminated.
configure:3142: $? = 1
configure:3131: g++ -qversion >&5
g++: error: unrecognized command-line option '-qversion'; did you mean '--version'?
g++: fatal error: no input files
compilation terminated.
configure:3142: $? = 1
configure:3162: checking whether the C++ compiler works
configure:3184: g++ -std=c++98 -g   conftest.cpp  >&5
configure:3188: $? = 0
configure:3238: result: yes
configure:3241: checking for C++ compiler default output file name
configure:3243: result: a.out
configure:3249: checking for suffix of executables
configure:3256: g++ -o conftest -std=c++98 -g   conftest.cpp  >&5
configure:3260: $? = 0
configure:3283: result: 
configure:3305: checking whether we are cross compiling
configure:3313: g++ -o conftest -std=c++98 -g   conftest.cpp  >&5
configure:3317: $? = 0
configure:3324: ./conftest
configure:3328: $? = 0
configure:3343: result: no
configure:3348: checking for suffix of object files
configure:3371: g++ -c -std=c++98 -g  conftest.cpp >&5
configure:3375: $? = 0
configure:3397: result: o
configure:3401: checking whether the compiler supports GNU C++
configure:3421: g++ -c -std=c++98 -g  conftest.cpp >&5
configure:3421: $? = 0
configure:3431: result: yes
configure:3442: checking whether g++ accepts -g
configure:3463: g++ -c -g  conftest.cpp >&5
configure:3463: $? = 0
configure:3507: result: yes
configure:3527: checking for g++ option to enable C++11 features
configure:3542: g++  -c -std=c++98 -g  conftest.cpp >&5
conftest.cpp:57:3: error: #error "Compiler does not advertise C++11 conformance"
   57 | # error "Compiler does not advertise C++11 conformance"
      |   ^~~~~
conftest.cpp:62:3: error: 'constexpr' does not name a type
   62 |   constexpr int get_val() { return 20; }
      |   ^~~~~~~~~
conftest.cpp:62:3: note: C++11 'constexpr' only available with '-std=c++11' or '-std=gnu++11'
conftest.cpp: In constructor 'cxx11test::delegate::delegate()':
conftest.cpp:74:30: warning: delegating constructors only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
   74 |     delegate(): delegate(2354) {}
      |                              ^
conftest.cpp: At global scope:
conftest.cpp:85:24: warning: override controls (override/final) only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
   85 |     virtual int getval() override final { return this->n * 2; }
      |                        ^
conftest.cpp:85:26: warning: override controls (override/final) only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
   85 |     virtual int getval() override final { return this->n * 2; }
      |                          ^~~~~~~~
conftest.cpp:92:16: warning: defaulted and deleted functions only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
   92 |     nocopy() = default;
      |                ^~~~~~~
conftest.cpp:93:29: warning: defaulted and deleted functions only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
   93 |     nocopy(const nocopy&) = delete;
      |                             ^~~~~~
conftest.cpp:94:41: warning: defaulted and deleted functions only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
   94 |     nocopy & operator=(const nocopy&) = delete;
      |                                         ^~~~~~
conftest.cpp:106:30: error: ISO C++ forbids declaration of 'sum' with no type [-fpermissive]
  106 |   template <typename V> auto sum(V first) -> V
      |                              ^~~
conftest.cpp:106:25: error: top-level declaration of 'sum' specifies 'auto'
  106 |   template <typename V> auto sum(V first) -> V
      |                         ^~~~
conftest.cpp:106:46: error: trailing return type only available with '-std=c++11' or '-std=gnu++11'
  106 |   template <typename V> auto sum(V first) -> V
      |                                              ^
conftest.cpp:110:33: warning: variadic templates only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
  110 |   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
      |                                 ^~~
conftest.cpp:110:69: warning: variadic templates only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
  110 |   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
      |                                                                     ^~~~
conftest.cpp:110:48: error: ISO C++ forbids declaration of 'sum' with no type [-fpermissive]
  110 |   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
      |                                                ^~~
conftest.cpp:110:43: error: top-level declaration of 'sum' specifies 'auto'
  110 |   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
      |                                           ^~~~
conftest.cpp:110:78: error: trailing return type only available with '-std=c++11' or '-std=gnu++11'
  110 |   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
      |                                                                              ^
conftest.cpp: In function 'int main(int, char**)':
conftest.cpp:134:8: error: 'a1' does not name a type
  134 |   auto a1 = 6538;
      |        ^~
conftest.cpp:135:8: error: 'a2' does not name a type
  135 |   auto a2 = 48573953.4;
      |        ^~
conftest.cpp:136:8: error: 'a3' does not name a type
  136 |   auto a3 = "String literal";
      |        ^~
conftest.cpp:139:13: error: 'i' does not name a type
  139 |   for (auto i = a3; *i; ++i) { total += *i; }
      |             ^
conftest.cpp:139:20: error: expected ';' before '*' token
  139 |   for (auto i = a3; *i; ++i) { total += *i; }
      |                    ^~
      |                    ;
conftest.cpp:139:22: error: 'i' was not declared in this scope
  139 |   for (auto i = a3; *i; ++i) { total += *i; }
      |                      ^
conftest.cpp:141:12: error: 'a2' was not declared in this scope
  141 |   decltype(a2) a4 = 34895.034;
      |            ^~
conftest.cpp:141:3: error: 'decltype' was not declared in this scope
  141 |   decltype(a2) a4 = 34895.034;
      |   ^~~~~~~~
conftest.cpp:145:23: error: 'get_val' is not a member of 'cxx11test'; did you mean 'eval'?
  145 |   short sa[cxx11test::get_val()] = { 0 };
      |                       ^~~~~~~
      |                       eval
conftest.cpp:155:14: error: ISO C++ forbids declaration of 'x' with no type [-fpermissive]
  155 |   for (auto &x : array) { x += 23; }
      |              ^
conftest.cpp:155:18: warning: range-based 'for' loops only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
  155 |   for (auto &x : array) { x += 23; }
      |                  ^~~~~
conftest.cpp:155:18: error: forming reference to reference type 'int (&)[20]'
conftest.cpp:160:41: warning: lambda expressions only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
  160 |   assert (eval ([](int x) { return x*2; }, 21) == 42);
      |                                         ^
conftest.cpp:160:16: error: no matching function for call to 'eval(main(int, char**)::<lambda(int)>, int)'
  160 |   assert (eval ([](int x) { return x*2; }, 21) == 42);
      |           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conftest.cpp:100:44: note: candidate: 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)'
  100 |   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
      |                                            ^~~~
conftest.cpp:100:44: note:   template argument deduction/substitution failed:
conftest.cpp: In substitution of 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret) [with Ret = int; Fn = main(int, char**)::<lambda(int)>]':
conftest.cpp:160:16:   required from here
conftest.cpp:160:16: error: template argument for 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)' uses local type 'main(int, char**)::<lambda(int)>'
  160 |   assert (eval ([](int x) { return x*2; }, 21) == 42);
      |           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conftest.cpp:160:16: error:   trying to instantiate 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)'
conftest.cpp:162:48: warning: lambda expressions only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
  162 |   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
      |                                                ^
conftest.cpp:162:16: error: no matching function for call to 'eval(main(int, char**)::<lambda(double)>, double)'
  162 |   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
      |           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conftest.cpp:100:44: note: candidate: 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)'
  100 |   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
      |                                            ^~~~
conftest.cpp:100:44: note:   template argument deduction/substitution failed:
conftest.cpp: In substitution of 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret) [with Ret = double; Fn = main(int, char**)::<lambda(double)>]':
conftest.cpp:162:16:   required from here
conftest.cpp:162:16: error: template argument for 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)' uses local type 'main(int, char**)::<lambda(double)>'
  162 |   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
      |           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conftest.cpp:162:16: error:   trying to instantiate 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)'
conftest.cpp:164:56: warning: lambda expressions only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
  164 |   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
      |                                                        ^
conftest.cpp:164:16: error: no matching function for call to 'eval(main(int, char**)::<lambda(double)>, double)'
  164 |   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
      |           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conftest.cpp:100:44: note: candidate: 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)'
  100 |   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
      |                                            ^~~~
conftest.cpp:100:44: note:   template argument deduction/substitution failed:
conftest.cpp: In substitution of 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret) [with Ret = double; Fn = main(int, char**)::<lambda(double)>]':
conftest.cpp:164:16:   required from here
conftest.cpp:164:16: error: template argument for 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)' uses local type 'main(int, char**)::<lambda(double)>'
  164 |   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
      |           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conftest.cpp:164:16: error:   trying to instantiate 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)'
conftest.cpp:169:20: error: 'sum' has not been declared in 'cxx11test'
  169 |   using cxx11test::sum;
      |                    ^~~
conftest.cpp:170:8: error: 'a' does not name a type
  170 |   auto a = sum(1);
      |        ^
conftest.cpp:171:8: error: 'b' does not name a type
  171 |   auto b = sum(1, 2);
      |        ^
conftest.cpp:172:8: error: 'c' does not name a type
  172 |   auto c = sum(1.0, 2.0, 3.0);
      |        ^
conftest.cpp:177:25: warning: empty parentheses were disambiguated as a function declaration [-Wvexing-parse]
  177 |   cxx11test::delegate d2();
      |                         ^~
conftest.cpp:177:25: note: remove parentheses to default-initialize a variable
  177 |   cxx11test::delegate d2();
      |                         ^~
      |                         --
conftest.cpp:186:13: error: 'nullptr' was not declared in this scope
  186 |   char *c = nullptr;
      |             ^~~~~~~
conftest.cpp:190:36: error: '>>' should be '> >' within a nested template argument list
  190 |   test_template<::test_template<int>> v(test_template<int>(12));
      |                                    ^~
      |                                    > >
conftest.cpp:190:16: error: '<::' cannot begin a template-argument list [-fpermissive]
  190 |   test_template<::test_template<int>> v(test_template<int>(12));
      |                ^~
conftest.cpp:190:16: note: '<:' is an alternate spelling for '['. Insert whitespace between '<' and '::'
conftest.cpp:190:16: note: (if you use '-fpermissive' or '-std=c++11', or '-std=gnu++11' G++ will accept your code)
conftest.cpp:194:22: error: 'u8' was not declared in this scope; did you mean 'utf8'?
  194 |   char const *utf8 = u8"UTF-8 string \u2500";
      |                      ^~
      |                      utf8
conftest.cpp:195:3: error: 'char16_t' was not declared in this scope
  195 |   char16_t const *utf16 = u"UTF-8 string \u2500";
      |   ^~~~~~~~
conftest.cpp:196:3: error: 'char32_t' was not declared in this scope
  196 |   char32_t const *utf32 = U"UTF-32 string \u2500";
      |   ^~~~~~~~
configure:3542: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "THIS_IS_SHORE_KITS"
| #define PACKAGE_TARNAME "this_is_shore_kits"
| #define PACKAGE_VERSION "2.1"
| #define PACKAGE_STRING "THIS_IS_SHORE_KITS 2.1"
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "this_is_shore_kits"
| #define VERSION "2.1"
| /* end confdefs.h.  */
| 
| // Does the compiler advertise C++98 conformance?
| #if !defined __cplusplus || __cplusplus < 199711L
| # error "Compiler does not advertise C++98 conformance"
| #endif
| 
| // These inclusions are to reject old compilers that
| // lack the unsuffixed header files.
| #include <cstdlib>
| #include <exception>
| 
| // <cassert> and <cstring> are *not* freestanding headers in C++98.
| extern void assert (int);
| namespace std {
|   extern int strcmp (const char *, const char *);
| }
| 
| // Namespaces, exceptions, and templates were all added after "C++ 2.0".
| using std::exception;
| using std::strcmp;
| 
| namespace {
| 
| void test_exception_syntax()
| {
|   try {
|     throw "test";
|   } catch (const char *s) {
|     // Extra parentheses suppress a warning when building autoconf itself,
|     // due to lint rules shared with more typical C programs.
|     assert (!(strcmp) (s, "test"));
|   }
| }
| 
| template <typename T> struct test_template
| {
|   T const val;
|   explicit test_template(T t) : val(t) {}
|   template <typename U> T add(U u) { return static_cast<T>(u) + val; }
| };
| 
| } // anonymous namespace
| 
| 
| // Does the compiler advertise C++ 2011 conformance?
| #if !defined __cplusplus || __cplusplus < 201103L
| # error "Compiler does not advertise C++11 conformance"
| #endif
| 
| namespace cxx11test
| {
|   constexpr int get_val() { return 20; }
| 
|   struct testinit
|   {
|     int i;
|     double d;
|   };
| 
|   class delegate
|   {
|   public:
|     delegate(int n) : n(n) {}
|     delegate(): delegate(2354) {}
| 
|     virtual int getval() { return this->n; };
|   protected:
|     int n;
|   };
| 
|   class overridden : public delegate
|   {
|   public:
|     overridden(int n): delegate(n) {}
|     virtual int getval() override final { return this->n * 2; }
|   };
| 
|   class nocopy
|   {
|   public:
|     nocopy(int i): i(i) {}
|     nocopy() = default;
|     nocopy(const nocopy&) = delete;
|     nocopy & operator=(const nocopy&) = delete;
|   private:
|     int i;
|   };
| 
|   // for testing lambda expressions
|   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
|   {
|     return f(v);
|   }
| 
|   // for testing variadic templates and trailing return types
|   template <typename V> auto sum(V first) -> V
|   {
|     return first;
|   }
|   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
|   {
|     return first + sum(rest...);
|   }
| }
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
|   assert (argc);
|   assert (! argv[0]);
| {
|   test_exception_syntax ();
|   test_template<double> tt (2.0);
|   assert (tt.add (4) == 6.0);
|   assert (true && !false);
| }
| 
|   
| {
|   // Test auto and decltype
|   auto a1 = 6538;
|   auto a2 = 48573953.4;
|   auto a3 = "String literal";
| 
|   int total = 0;
|   for (auto i = a3; *i; ++i) { total += *i; }
| 
|   decltype(a2) a4 = 34895.034;
| }
| {
|   // Test constexpr
|   short sa[cxx11test::get_val()] = { 0 };
| }
| {
|   // Test initializer lists
|   cxx11test::testinit il = { 4323, 435234.23544 };
| }
| {
|   // Test range-based for
|   int array[] = {9, 7, 13, 15, 4, 18, 12, 10, 5, 3,
|                  14, 19, 17, 8, 6, 20, 16, 2, 11, 1};
|   for (auto &x : array) { x += 23; }
| }
| {
|   // Test lambda expressions
|   using cxx11test::eval;
|   assert (eval ([](int x) { return x*2; }, 21) == 42);
|   double d = 2.0;
|   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
|   assert (d == 5.0);
|   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
|   assert (d == 5.0);
| }
| {
|   // Test use of variadic templates
|   using cxx11test::sum;
|   auto a = sum(1);
|   auto b = sum(1, 2);
|   auto c = sum(1.0, 2.0, 3.0);
| }
| {
|   // Test constructor delegation
|   cxx11test::delegate d1;
|   cxx11test::delegate d2();
|   cxx11test::delegate d3(45);
| }
| {
|   // Test override and final
|   cxx11test::overridden o1(55464);
| }
| {
|   // Test nullptr
|   char *c = nullptr;
| }
| {
|   // Test template brackets
|   test_template<::test_template<int>> v(test_template<int>(12));
| }
| {
|   // Unicode literals
|   char const *utf8 = u8"UTF-8 string \u2500";
|   char16_t const *utf16 = u"UTF-8 string \u2500";
|   char32_t const *utf32 = U"UTF-32 string \u2500";
| }
| 
|   return ok;
| }
| 
configure:3542: g++ -std=gnu++11 -c -std=c++98 -g  conftest.cpp >&5
conftest.cpp:57:3: error: #error "Compiler does not advertise C++11 conformance"
   57 | # error "Compiler does not advertise C++11 conformance"
      |   ^~~~~
conftest.cpp:62:3: error: 'constexpr' does not name a type
   62 |   constexpr int get_val() { return 20; }
      |   ^~~~~~~~~
conftest.cpp:62:3: note: C++11 'constexpr' only available with '-std=c++11' or '-std=gnu++11'
conftest.cpp: In constructor 'cxx11test::delegate::delegate()':
conftest.cpp:74:30: warning: delegating constructors only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
   74 |     delegate(): delegate(2354) {}
      |                              ^
conftest.cpp: At global scope:
conftest.cpp:85:24: warning: override controls (override/final) only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
   85 |     virtual int getval() override final { return this->n * 2; }
      |                        ^
conftest.cpp:85:26: warning: override controls (override/final) only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
   85 |     virtual int getval() override final { return this->n * 2; }
      |                          ^~~~~~~~
conftest.cpp:92:16: warning: defaulted and deleted functions only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
   92 |     nocopy() = default;
      |                ^~~~~~~
conftest.cpp:93:29: warning: defaulted and deleted functions only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
   93 |     nocopy(const nocopy&) = delete;
      |                             ^~~~~~
conftest.cpp:94:41: warning: defaulted and deleted functions only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
   94 |     nocopy & operator=(const nocopy&) = delete;
      |                                         ^~~~~~
conftest.cpp:106:30: error: ISO C++ forbids declaration of 'sum' with no type [-fpermissive]
  106 |   template <typename V> auto sum(V first) -> V
      |                              ^~~
conftest.cpp:106:25: error: top-level declaration of 'sum' specifies 'auto'
  106 |   template <typename V> auto sum(V first) -> V
      |                         ^~~~
conftest.cpp:106:46: error: trailing return type only available with '-std=c++11' or '-std=gnu++11'
  106 |   template <typename V> auto sum(V first) -> V
      |                                              ^
conftest.cpp:110:33: warning: variadic templates only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
  110 |   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
      |                                 ^~~
conftest.cpp:110:69: warning: variadic templates only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
  110 |   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
      |                                                                     ^~~~
conftest.cpp:110:48: error: ISO C++ forbids declaration of 'sum' with no type [-fpermissive]
  110 |   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
      |                                                ^~~
conftest.cpp:110:43: error: top-level declaration of 'sum' specifies 'auto'
  110 |   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
      |                                           ^~~~
conftest.cpp:110:78: error: trailing return type only available with '-std=c++11' or '-std=gnu++11'
  110 |   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
      |                                                                              ^
conftest.cpp: In function 'int main(int, char**)':
conftest.cpp:134:8: error: 'a1' does not name a type
  134 |   auto a1 = 6538;
      |        ^~
conftest.cpp:135:8: error: 'a2' does not name a type
  135 |   auto a2 = 48573953.4;
      |        ^~
conftest.cpp:136:8: error: 'a3' does not name a type
  136 |   auto a3 = "String literal";
      |        ^~
conftest.cpp:139:13: error: 'i' does not name a type
  139 |   for (auto i = a3; *i; ++i) { total += *i; }
      |             ^
conftest.cpp:139:20: error: expected ';' before '*' token
  139 |   for (auto i = a3; *i; ++i) { total += *i; }
      |                    ^~
      |                    ;
conftest.cpp:139:22: error: 'i' was not declared in this scope
  139 |   for (auto i = a3; *i; ++i) { total += *i; }
      |                      ^
conftest.cpp:141:12: error: 'a2' was not declared in this scope
  141 |   decltype(a2) a4 = 34895.034;
      |            ^~
conftest.cpp:141:3: error: 'decltype' was not declared in this scope
  141 |   decltype(a2) a4 = 34895.034;
      |   ^~~~~~~~
conftest.cpp:145:23: error: 'get_val' is not a member of 'cxx11test'; did you mean 'eval'?
  145 |   short sa[cxx11test::get_val()] = { 0 };
      |                       ^~~~~~~
      |                       eval
conftest.cpp:155:14: error: ISO C++ forbids declaration of 'x' with no type [-fpermissive]
  155 |   for (auto &x : array) { x += 23; }
      |              ^
conftest.cpp:155:18: warning: range-based 'for' loops only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
  155 |   for (auto &x : array) { x += 23; }
      |                  ^~~~~
conftest.cpp:155:18: error: forming reference to reference type 'int (&)[20]'
conftest.cpp:160:41: warning: lambda expressions only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
  160 |   assert (eval ([](int x) { return x*2; }, 21) == 42);
      |                                         ^
conftest.cpp:160:16: error: no matching function for call to 'eval(main(int, char**)::<lambda(int)>, int)'
  160 |   assert (eval ([](int x) { return x*2; }, 21) == 42);
      |           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conftest.cpp:100:44: note: candidate: 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)'
  100 |   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
      |                                            ^~~~
conftest.cpp:100:44: note:   template argument deduction/substitution failed:
conftest.cpp: In substitution of 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret) [with Ret = int; Fn = main(int, char**)::<lambda(int)>]':
conftest.cpp:160:16:   required from here
conftest.cpp:160:16: error: template argument for 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)' uses local type 'main(int, char**)::<lambda(int)>'
  160 |   assert (eval ([](int x) { return x*2; }, 21) == 42);
      |           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conftest.cpp:160:16: error:   trying to instantiate 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)'
conftest.cpp:162:48: warning: lambda expressions only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
  162 |   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
      |                                                ^
conftest.cpp:162:16: error: no matching function for call to 'eval(main(int, char**)::<lambda(double)>, double)'
  162 |   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
      |           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conftest.cpp:100:44: note: candidate: 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)'
  100 |   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
      |                                            ^~~~
conftest.cpp:100:44: note:   template argument deduction/substitution failed:
conftest.cpp: In substitution of 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret) [with Ret = double; Fn = main(int, char**)::<lambda(double)>]':
conftest.cpp:162:16:   required from here
conftest.cpp:162:16: error: template argument for 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)' uses local type 'main(int, char**)::<lambda(double)>'
  162 |   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
      |           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conftest.cpp:162:16: error:   trying to instantiate 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)'
conftest.cpp:164:56: warning: lambda expressions only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
  164 |   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
      |                                                        ^
conftest.cpp:164:16: error: no matching function for call to 'eval(main(int, char**)::<lambda(double)>, double)'
  164 |   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
      |           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conftest.cpp:100:44: note: candidate: 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)'
  100 |   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
      |                                            ^~~~
conftest.cpp:100:44: note:   template argument deduction/substitution failed:
conftest.cpp: In substitution of 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret) [with Ret = double; Fn = main(int, char**)::<lambda(double)>]':
conftest.cpp:164:16:   required from here
conftest.cpp:164:16: error: template argument for 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)' uses local type 'main(int, char**)::<lambda(double)>'
  164 |   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
      |           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conftest.cpp:164:16: error:   trying to instantiate 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)'
conftest.cpp:169:20: error: 'sum' has not been declared in 'cxx11test'
  169 |   using cxx11test::sum;
      |                    ^~~
conftest.cpp:170:8: error: 'a' does not name a type
  170 |   auto a = sum(1);
      |        ^
conftest.cpp:171:8: error: 'b' does not name a type
  171 |   auto b = sum(1, 2);
      |        ^
conftest.cpp:172:8: error: 'c' does not name a type
  172 |   auto c = sum(1.0, 2.0, 3.0);
      |        ^
conftest.cpp:177:25: warning: empty parentheses were disambiguated as a function declaration [-Wvexing-parse]
  177 |   cxx11test::delegate d2();
      |                         ^~
conftest.cpp:177:25: note: remove parentheses to default-initialize a variable
  177 |   cxx11test::delegate d2();
      |                         ^~
      |                         --
conftest.cpp:186:13: error: 'nullptr' was not declared in this scope
  186 |   char *c = nullptr;
      |             ^~~~~~~
conftest.cpp:190:36: error: '>>' should be '> >' within a nested template argument list
  190 |   test_template<::test_template<int>> v(test_template<int>(12));
      |                                    ^~
      |                                    > >
conftest.cpp:190:16: error: '<::' cannot begin a template-argument list [-fpermissive]
  190 |   test_template<::test_template<int>> v(test_template<int>(12));
      |                ^~
conftest.cpp:190:16: note: '<:' is an alternate spelling for '['. Insert whitespace between '<' and '::'
conftest.cpp:190:16: note: (if you use '-fpermissive' or '-std=c++11', or '-std=gnu++11' G++ will accept your code)
conftest.cpp:194:22: error: 'u8' was not declared in this scope; did you mean 'utf8'?
  194 |   char const *utf8 = u8"UTF-8 string \u2500";
      |                      ^~
      |                      utf8
conftest.cpp:195:3: error: 'char16_t' was not declared in this scope
  195 |   char16_t const *utf16 = u"UTF-8 string \u2500";
      |   ^~~~~~~~
conftest.cpp:196:3: error: 'char32_t' was not declared in this scope
  196 |   char32_t const *utf32 = U"UTF-32 string \u2500";
      |   ^~~~~~~~
configure:3542: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "THIS_IS_SHORE_KITS"
| #define PACKAGE_TARNAME "this_is_shore_kits"
| #define PACKAGE_VERSION "2.1"
| #define PACKAGE_STRING "THIS_IS_SHORE_KITS 2.1"
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "this_is_shore_kits"
| #define VERSION "2.1"
| /* end confdefs.h.  */
| 
| // Does the compiler advertise C++98 conformance?
| #if !defined __cplusplus || __cplusplus < 199711L
| # error "Compiler does not advertise C++98 conformance"
| #endif
| 
| // These inclusions are to reject old compilers that
| // lack the unsuffixed header files.
| #include <cstdlib>
| #include <exception>
| 
| // <cassert> and <cstring> are *not* freestanding headers in C++98.
| extern void assert (int);
| namespace std {
|   extern int strcmp (const char *, const char *);
| }
| 
| // Namespaces, exceptions, and templates were all added after "C++ 2.0".
| using std::exception;
| using std::strcmp;
| 
| namespace {
| 
| void test_exception_syntax()
| {
|   try {
|     throw "test";
|   } catch (const char *s) {
|     // Extra parentheses suppress a warning when building autoconf itself,
|     // due to lint rules shared with more typical C programs.
|     assert (!(strcmp) (s, "test"));
|   }
| }
| 
| template <typename T> struct test_template
| {
|   T const val;
|   explicit test_template(T t) : val(t) {}
|   template <typename U> T add(U u) { return static_cast<T>(u) + val; }
| };
| 
| } // anonymous namespace
| 
| 
| // Does the compiler advertise C++ 2011 conformance?
| #if !defined __cplusplus || __cplusplus < 201103L
| # error "Compiler does not advertise C++11 conformance"
| #endif
| 
| namespace cxx11test
| {
|   constexpr int get_val() { return 20; }
| 
|   struct testinit
|   {
|     int i;
|     double d;
|   };
| 
|   class delegate
|   {
|   public:
|     delegate(int n) : n(n) {}
|     delegate(): delegate(2354) {}
| 
|     virtual int getval() { return this->n; };
|   protected:
|     int n;
|   };
| 
|   class overridden : public delegate
|   {
|   public:
|     overridden(int n): delegate(n) {}
|     virtual int getval() override final { return this->n * 2; }
|   };
| 
|   class nocopy
|   {
|   public:
|     nocopy(int i): i(i) {}
|     nocopy() = default;
|     nocopy(const nocopy&) = delete;
|     nocopy & operator=(const nocopy&) = delete;
|   private:
|     int i;
|   };
| 
|   // for testing lambda expressions
|   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
|   {
|     return f(v);
|   }
| 
|   // for testing variadic templates and trailing return types
|   template <typename V> auto sum(V first) -> V
|   {
|     return first;
|   }
|   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
|   {
|     return first + sum(rest...);
|   }
| }
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
|   assert (argc);
|   assert (! argv[0]);
| {
|   test_exception_syntax ();
|   test_template<double> tt (2.0);
|   assert (tt.add (4) == 6.0);
|   assert (true && !false);
| }
| 
|   
| {
|   // Test auto and decltype
|   auto a1 = 6538;
|   auto a2 = 48573953.4;
|   auto a3 = "String literal";
| 
|   int total = 0;
|   for (auto i = a3; *i; ++i) { total += *i; }
| 
|   decltype(a2) a4 = 34895.034;
| }
| {
|   // Test constexpr
|   short sa[cxx11test::get_val()] = { 0 };
| }
| {
|   // Test initializer lists
|   cxx11test::testinit il = { 4323, 435234.23544 };
| }
| {
|   // Test range-based for
|   int array[] = {9, 7, 13, 15, 4, 18, 12, 10, 5, 3,
|                  14, 19, 17, 8, 6, 20, 16, 2, 11, 1};
|   for (auto &x : array) { x += 23; }
| }
| {
|   // Test lambda expressions
|   using cxx11test::eval;
|   assert (eval ([](int x) { return x*2; }, 21) == 42);
|   double d = 2.0;
|   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
|   assert (d == 5.0);
|   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
|   assert (d == 5.0);
| }
| {
|   // Test use of variadic templates
|   using cxx11test::sum;
|   auto a = sum(1);
|   auto b = sum(1, 2);
|   auto c = sum(1.0, 2.0, 3.0);
| }
| {
|   // Test constructor delegation
|   cxx11test::delegate d1;
|   cxx11test::delegate d2();
|   cxx11test::delegate d3(45);
| }
| {
|   // Test override and final
|   cxx11test::overridden o1(55464);
| }
| {
|   // Test nullptr
|   char *c = nullptr;
| }
| {
|   // Test template brackets
|   test_template<::test_template<int>> v(test_template<int>(12));
| }
| {
|   // Unicode literals
|   char const *utf8 = u8"UTF-8 string \u2500";
|   char16_t const *utf16 = u"UTF-8 string \u2500";
|   char32_t const *utf32 = U"UTF-32 string \u2500";
| }
| 
|   return ok;
| }
| 
configure:3542: g++ -std=gnu++0x -c -std=c++98 -g  conftest.cpp >&5
conftest.cpp:57:3: error: #error "Compiler does not advertise C++11 conformance"
   57 | # error "Compiler does not advertise C++11 conformance"
      |   ^~~~~
conftest.cpp:62:3: error: 'constexpr' does not name a type
   62 |   constexpr int get_val() { return 20; }
      |   ^~~~~~~~~
conftest.cpp:62:3: note: C++11 'constexpr' only available with '-std=c++11' or '-std=gnu++11'
conftest.cpp: In constructor 'cxx11test::delegate::delegate()':
conftest.cpp:74:30: warning: delegating constructors only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
   74 |     delegate(): delegate(2354) {}
      |                              ^
conftest.cpp: At global scope:
conftest.cpp:85:24: warning: override controls (override/final) only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
   85 |     virtual int getval() override final { return this->n * 2; }
      |                        ^
conftest.cpp:85:26: warning: override controls (override/final) only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
   85 |     virtual int getval() override final { return this->n * 2; }
      |                          ^~~~~~~~
conftest.cpp:92:16: warning: defaulted and deleted functions only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
   92 |     nocopy() = default;
      |                ^~~~~~~
conftest.cpp:93:29: warning: defaulted and deleted functions only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
   93 |     nocopy(const nocopy&) = delete;
      |                             ^~~~~~
conftest.cpp:94:41: warning: defaulted and deleted functions only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
   94 |     nocopy & operator=(const nocopy&) = delete;
      |                                         ^~~~~~
conftest.cpp:106:30: error: ISO C++ forbids declaration of 'sum' with no type [-fpermissive]
  106 |   template <typename V> auto sum(V first) -> V
      |                              ^~~
conftest.cpp:106:25: error: top-level declaration of 'sum' specifies 'auto'
  106 |   template <typename V> auto sum(V first) -> V
      |                         ^~~~
conftest.cpp:106:46: error: trailing return type only available with '-std=c++11' or '-std=gnu++11'
  106 |   template <typename V> auto sum(V first) -> V
      |                                              ^
conftest.cpp:110:33: warning: variadic templates only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
  110 |   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
      |                                 ^~~
conftest.cpp:110:69: warning: variadic templates only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
  110 |   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
      |                                                                     ^~~~
conftest.cpp:110:48: error: ISO C++ forbids declaration of 'sum' with no type [-fpermissive]
  110 |   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
      |                                                ^~~
conftest.cpp:110:43: error: top-level declaration of 'sum' specifies 'auto'
  110 |   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
      |                                           ^~~~
conftest.cpp:110:78: error: trailing return type only available with '-std=c++11' or '-std=gnu++11'
  110 |   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
      |                                                                              ^
conftest.cpp: In function 'int main(int, char**)':
conftest.cpp:134:8: error: 'a1' does not name a type
  134 |   auto a1 = 6538;
      |        ^~
conftest.cpp:135:8: error: 'a2' does not name a type
  135 |   auto a2 = 48573953.4;
      |        ^~
conftest.cpp:136:8: error: 'a3' does not name a type
  136 |   auto a3 = "String literal";
      |        ^~
conftest.cpp:139:13: error: 'i' does not name a type
  139 |   for (auto i = a3; *i; ++i) { total += *i; }
      |             ^
conftest.cpp:139:20: error: expected ';' before '*' token
  139 |   for (auto i = a3; *i; ++i) { total += *i; }
      |                    ^~
      |                    ;
conftest.cpp:139:22: error: 'i' was not declared in this scope
  139 |   for (auto i = a3; *i; ++i) { total += *i; }
      |                      ^
conftest.cpp:141:12: error: 'a2' was not declared in this scope
  141 |   decltype(a2) a4 = 34895.034;
      |            ^~
conftest.cpp:141:3: error: 'decltype' was not declared in this scope
  141 |   decltype(a2) a4 = 34895.034;
      |   ^~~~~~~~
conftest.cpp:145:23: error: 'get_val' is not a member of 'cxx11test'; did you mean 'eval'?
  145 |   short sa[cxx11test::get_val()] = { 0 };
      |                       ^~~~~~~
      |                       eval
conftest.cpp:155:14: error: ISO C++ forbids declaration of 'x' with no type [-fpermissive]
  155 |   for (auto &x : array) { x += 23; }
      |              ^
conftest.cpp:155:18: warning: range-based 'for' loops only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
  155 |   for (auto &x : array) { x += 23; }
      |                  ^~~~~
conftest.cpp:155:18: error: forming reference to reference type 'int (&)[20]'
conftest.cpp:160:41: warning: lambda expressions only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
  160 |   assert (eval ([](int x) { return x*2; }, 21) == 42);
      |                                         ^
conftest.cpp:160:16: error: no matching function for call to 'eval(main(int, char**)::<lambda(int)>, int)'
  160 |   assert (eval ([](int x) { return x*2; }, 21) == 42);
      |           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conftest.cpp:100:44: note: candidate: 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)'
  100 |   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
      |                                            ^~~~
conftest.cpp:100:44: note:   template argument deduction/substitution failed:
conftest.cpp: In substitution of 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret) [with Ret = int; Fn = main(int, char**)::<lambda(int)>]':
conftest.cpp:160:16:   required from here
conftest.cpp:160:16: error: template argument for 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)' uses local type 'main(int, char**)::<lambda(int)>'
  160 |   assert (eval ([](int x) { return x*2; }, 21) == 42);
      |           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conftest.cpp:160:16: error:   trying to instantiate 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)'
conftest.cpp:162:48: warning: lambda expressions only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
  162 |   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
      |                                                ^
conftest.cpp:162:16: error: no matching function for call to 'eval(main(int, char**)::<lambda(double)>, double)'
  162 |   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
      |           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conftest.cpp:100:44: note: candidate: 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)'
  100 |   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
      |                                            ^~~~
conftest.cpp:100:44: note:   template argument deduction/substitution failed:
conftest.cpp: In substitution of 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret) [with Ret = double; Fn = main(int, char**)::<lambda(double)>]':
conftest.cpp:162:16:   required from here
conftest.cpp:162:16: error: template argument for 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)' uses local type 'main(int, char**)::<lambda(double)>'
  162 |   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
      |           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conftest.cpp:162:16: error:   trying to instantiate 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)'
conftest.cpp:164:56: warning: lambda expressions only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
  164 |   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
      |                                                        ^
conftest.cpp:164:16: error: no matching function for call to 'eval(main(int, char**)::<lambda(double)>, double)'
  164 |   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
      |           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conftest.cpp:100:44: note: candidate: 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)'
  100 |   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
      |                                            ^~~~
conftest.cpp:100:44: note:   template argument deduction/substitution failed:
conftest.cpp: In substitution of 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret) [with Ret = double; Fn = main(int, char**)::<lambda(double)>]':
conftest.cpp:164:16:   required from here
conftest.cpp:164:16: error: template argument for 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)' uses local type 'main(int, char**)::<lambda(double)>'
  164 |   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
      |           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conftest.cpp:164:16: error:   trying to instantiate 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)'
conftest.cpp:169:20: error: 'sum' has not been declared in 'cxx11test'
  169 |   using cxx11test::sum;
      |                    ^~~
conftest.cpp:170:8: error: 'a' does not name a type
  170 |   auto a = sum(1);
      |        ^
conftest.cpp:171:8: error: 'b' does not name a type
  171 |   auto b = sum(1, 2);
      |        ^
conftest.cpp:172:8: error: 'c' does not name a type
  172 |   auto c = sum(1.0, 2.0, 3.0);
      |        ^
conftest.cpp:177:25: warning: empty parentheses were disambiguated as a function declaration [-Wvexing-parse]
  177 |   cxx11test::delegate d2();
      |                         ^~
conftest.cpp:177:25: note: remove parentheses to default-initialize a variable
  177 |   cxx11test::delegate d2();
      |                         ^~
      |                         --
conftest.cpp:186:13: error: 'nullptr' was not declared in this scope
  186 |   char *c = nullptr;
      |             ^~~~~~~
conftest.cpp:190:36: error: '>>' should be '> >' within a nested template argument list
  190 |   test_template<::test_template<int>> v(test_template<int>(12));
      |                                    ^~
      |                                    > >
conftest.cpp:190:16: error: '<::' cannot begin a template-argument list [-fpermissive]
  190 |   test_template<::test_template<int>> v(test_template<int>(12));
      |                ^~
conftest.cpp:190:16: note: '<:' is an alternate spelling for '['. Insert whitespace between '<' and '::'
conftest.cpp:190:16: note: (if you use '-fpermissive' or '-std=c++11', or '-std=gnu++11' G++ will accept your code)
conftest.cpp:194:22: error: 'u8' was not declared in this scope; did you mean 'utf8'?
  194 |   char const *utf8 = u8"UTF-8 string \u2500";
      |                      ^~
      |                      utf8
conftest.cpp:195:3: error: 'char16_t' was not declared in this scope
  195 |   char16_t const *utf16 = u"UTF-8 string \u2500";
      |   ^~~~~~~~
conftest.cpp:196:3: error: 'char32_t' was not declared in this scope
  196 |   char32_t const *utf32 = U"UTF-32 string \u2500";
      |   ^~~~~~~~
configure:3542: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "THIS_IS_SHORE_KITS"
| #define PACKAGE_TARNAME "this_is_shore_kits"
| #define PACKAGE_VERSION "2.1"
| #define PACKAGE_STRING "THIS_IS_SHORE_KITS 2.1"
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "this_is_shore_kits"
| #define VERSION "2.1"
| /* end confdefs.h.  */
| 
| // Does the compiler advertise C++98 conformance?
| #if !defined __cplusplus || __cplusplus < 199711L
| # error "Compiler does not advertise C++98 conformance"
| #endif
| 
| // These inclusions are to reject old compilers that
| // lack the unsuffixed header files.
| #include <cstdlib>
| #include <exception>
| 
| // <cassert> and <cstring> are *not* freestanding headers in C++98.
| extern void assert (int);
| namespace std {
|   extern int strcmp (const char *, const char *);
| }
| 
| // Namespaces, exceptions, and templates were all added after "C++ 2.0".
| using std::exception;
| using std::strcmp;
| 
| namespace {
| 
| void test_exception_syntax()
| {
|   try {
|     throw "test";
|   } catch (const char *s) {
|     // Extra parentheses suppress a warning when building autoconf itself,
|     // due to lint rules shared with more typical C programs.
|     assert (!(strcmp) (s, "test"));
|   }
| }
| 
| template <typename T> struct test_template
| {
|   T const val;
|   explicit test_template(T t) : val(t) {}
|   template <typename U> T add(U u) { return static_cast<T>(u) + val; }
| };
| 
| } // anonymous namespace
| 
| 
| // Does the compiler advertise C++ 2011 conformance?
| #if !defined __cplusplus || __cplusplus < 201103L
| # error "Compiler does not advertise C++11 conformance"
| #endif
| 
| namespace cxx11test
| {
|   constexpr int get_val() { return 20; }
| 
|   struct testinit
|   {
|     int i;
|     double d;
|   };
| 
|   class delegate
|   {
|   public:
|     delegate(int n) : n(n) {}
|     delegate(): delegate(2354) {}
| 
|     virtual int getval() { return this->n; };
|   protected:
|     int n;
|   };
| 
|   class overridden : public delegate
|   {
|   public:
|     overridden(int n): delegate(n) {}
|     virtual int getval() override final { return this->n * 2; }
|   };
| 
|   class nocopy
|   {
|   public:
|     nocopy(int i): i(i) {}
|     nocopy() = default;
|     nocopy(const nocopy&) = delete;
|     nocopy & operator=(const nocopy&) = delete;
|   private:
|     int i;
|   };
| 
|   // for testing lambda expressions
|   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
|   {
|     return f(v);
|   }
| 
|   // for testing variadic templates and trailing return types
|   template <typename V> auto sum(V first) -> V
|   {
|     return first;
|   }
|   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
|   {
|     return first + sum(rest...);
|   }
| }
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
|   assert (argc);
|   assert (! argv[0]);
| {
|   test_exception_syntax ();
|   test_template<double> tt (2.0);
|   assert (tt.add (4) == 6.0);
|   assert (true && !false);
| }
| 
|   
| {
|   // Test auto and decltype
|   auto a1 = 6538;
|   auto a2 = 48573953.4;
|   auto a3 = "String literal";
| 
|   int total = 0;
|   for (auto i = a3; *i; ++i) { total += *i; }
| 
|   decltype(a2) a4 = 34895.034;
| }
| {
|   // Test constexpr
|   short sa[cxx11test::get_val()] = { 0 };
| }
| {
|   // Test initializer lists
|   cxx11test::testinit il = { 4323, 435234.23544 };
| }
| {
|   // Test range-based for
|   int array[] = {9, 7, 13, 15, 4, 18, 12, 10, 5, 3,
|                  14, 19, 17, 8, 6, 20, 16, 2, 11, 1};
|   for (auto &x : array) { x += 23; }
| }
| {
|   // Test lambda expressions
|   using cxx11test::eval;
|   assert (eval ([](int x) { return x*2; }, 21) == 42);
|   double d = 2.0;
|   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
|   assert (d == 5.0);
|   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
|   assert (d == 5.0);
| }
| {
|   // Test use of variadic templates
|   using cxx11test::sum;
|   auto a = sum(1);
|   auto b = sum(1, 2);
|   auto c = sum(1.0, 2.0, 3.0);
| }
| {
|   // Test constructor delegation
|   cxx11test::delegate d1;
|   cxx11test::delegate d2();
|   cxx11test::delegate d3(45);
| }
| {
|   // Test override and final
|   cxx11test::overridden o1(55464);
| }
| {
|   // Test nullptr
|   char *c = nullptr;
| }
| {
|   // Test template brackets
|   test_template<::test_template<int>> v(test_template<int>(12));
| }
| {
|   // Unicode literals
|   char const *utf8 = u8"UTF-8 string \u2500";
|   char16_t const *utf16 = u"UTF-8 string \u2500";
|   char32_t const *utf32 = U"UTF-32 string \u2500";
| }
| 
|   return ok;
| }
| 
configure:3542: g++ -std=c++11 -c -std=c++98 -g  conftest.cpp >&5
conftest.cpp:57:3: error: #error "Compiler does not advertise C++11 conformance"
   57 | # error "Compiler does not advertise C++11 conformance"
      |   ^~~~~
conftest.cpp:62:3: error: 'constexpr' does not name a type
   62 |   constexpr int get_val() { return 20; }
      |   ^~~~~~~~~
conftest.cpp:62:3: note: C++11 'constexpr' only available with '-std=c++11' or '-std=gnu++11'
conftest.cpp: In constructor 'cxx11test::delegate::delegate()':
conftest.cpp:74:30: warning: delegating constructors only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
   74 |     delegate(): delegate(2354) {}
      |                              ^
conftest.cpp: At global scope:
conftest.cpp:85:24: warning: override controls (override/final) only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
   85 |     virtual int getval() override final { return this->n * 2; }
      |                        ^
conftest.cpp:85:26: warning: override controls (override/final) only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
   85 |     virtual int getval() override final { return this->n * 2; }
      |                          ^~~~~~~~
conftest.cpp:92:16: warning: defaulted and deleted functions only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
   92 |     nocopy() = default;
      |                ^~~~~~~
conftest.cpp:93:29: warning: defaulted and deleted functions only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
   93 |     nocopy(const nocopy&) = delete;
      |                             ^~~~~~
conftest.cpp:94:41: warning: defaulted and deleted functions only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
   94 |     nocopy & operator=(const nocopy&) = delete;
      |                                         ^~~~~~
conftest.cpp:106:30: error: ISO C++ forbids declaration of 'sum' with no type [-fpermissive]
  106 |   template <typename V> auto sum(V first) -> V
      |                              ^~~
conftest.cpp:106:25: error: top-level declaration of 'sum' specifies 'auto'
  106 |   template <typename V> auto sum(V first) -> V
      |                         ^~~~
conftest.cpp:106:46: error: trailing return type only available with '-std=c++11' or '-std=gnu++11'
  106 |   template <typename V> auto sum(V first) -> V
      |                                              ^
conftest.cpp:110:33: warning: variadic templates only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
  110 |   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
      |                                 ^~~
conftest.cpp:110:69: warning: variadic templates only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
  110 |   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
      |                                                                     ^~~~
conftest.cpp:110:48: error: ISO C++ forbids declaration of 'sum' with no type [-fpermissive]
  110 |   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
      |                                                ^~~
conftest.cpp:110:43: error: top-level declaration of 'sum' specifies 'auto'
  110 |   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
      |                                           ^~~~
conftest.cpp:110:78: error: trailing return type only available with '-std=c++11' or '-std=gnu++11'
  110 |   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
      |                                                                              ^
conftest.cpp: In function 'int main(int, char**)':
conftest.cpp:134:8: error: 'a1' does not name a type
  134 |   auto a1 = 6538;
      |        ^~
conftest.cpp:135:8: error: 'a2' does not name a type
  135 |   auto a2 = 48573953.4;
      |        ^~
conftest.cpp:136:8: error: 'a3' does not name a type
  136 |   auto a3 = "String literal";
      |        ^~
conftest.cpp:139:13: error: 'i' does not name a type
  139 |   for (auto i = a3; *i; ++i) { total += *i; }
      |             ^
conftest.cpp:139:20: error: expected ';' before '*' token
  139 |   for (auto i = a3; *i; ++i) { total += *i; }
      |                    ^~
      |                    ;
conftest.cpp:139:22: error: 'i' was not declared in this scope
  139 |   for (auto i = a3; *i; ++i) { total += *i; }
      |                      ^
conftest.cpp:141:12: error: 'a2' was not declared in this scope
  141 |   decltype(a2) a4 = 34895.034;
      |            ^~
conftest.cpp:141:3: error: 'decltype' was not declared in this scope
  141 |   decltype(a2) a4 = 34895.034;
      |   ^~~~~~~~
conftest.cpp:145:23: error: 'get_val' is not a member of 'cxx11test'; did you mean 'eval'?
  145 |   short sa[cxx11test::get_val()] = { 0 };
      |                       ^~~~~~~
      |                       eval
conftest.cpp:155:14: error: ISO C++ forbids declaration of 'x' with no type [-fpermissive]
  155 |   for (auto &x : array) { x += 23; }
      |              ^
conftest.cpp:155:18: warning: range-based 'for' loops only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
  155 |   for (auto &x : array) { x += 23; }
      |                  ^~~~~
conftest.cpp:155:18: error: forming reference to reference type 'int (&)[20]'
conftest.cpp:160:41: warning: lambda expressions only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
  160 |   assert (eval ([](int x) { return x*2; }, 21) == 42);
      |                                         ^
conftest.cpp:160:16: error: no matching function for call to 'eval(main(int, char**)::<lambda(int)>, int)'
  160 |   assert (eval ([](int x) { return x*2; }, 21) == 42);
      |           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conftest.cpp:100:44: note: candidate: 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)'
  100 |   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
      |                                            ^~~~
conftest.cpp:100:44: note:   template argument deduction/substitution failed:
conftest.cpp: In substitution of 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret) [with Ret = int; Fn = main(int, char**)::<lambda(int)>]':
conftest.cpp:160:16:   required from here
conftest.cpp:160:16: error: template argument for 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)' uses local type 'main(int, char**)::<lambda(int)>'
  160 |   assert (eval ([](int x) { return x*2; }, 21) == 42);
      |           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conftest.cpp:160:16: error:   trying to instantiate 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)'
conftest.cpp:162:48: warning: lambda expressions only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
  162 |   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
      |                                                ^
conftest.cpp:162:16: error: no matching function for call to 'eval(main(int, char**)::<lambda(double)>, double)'
  162 |   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
      |           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conftest.cpp:100:44: note: candidate: 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)'
  100 |   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
      |                                            ^~~~
conftest.cpp:100:44: note:   template argument deduction/substitution failed:
conftest.cpp: In substitution of 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret) [with Ret = double; Fn = main(int, char**)::<lambda(double)>]':
conftest.cpp:162:16:   required from here
conftest.cpp:162:16: error: template argument for 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)' uses local type 'main(int, char**)::<lambda(double)>'
  162 |   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
      |           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conftest.cpp:162:16: error:   trying to instantiate 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)'
conftest.cpp:164:56: warning: lambda expressions only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
  164 |   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
      |                                                        ^
conftest.cpp:164:16: error: no matching function for call to 'eval(main(int, char**)::<lambda(double)>, double)'
  164 |   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
      |           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conftest.cpp:100:44: note: candidate: 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)'
  100 |   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
      |                                            ^~~~
conftest.cpp:100:44: note:   template argument deduction/substitution failed:
conftest.cpp: In substitution of 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret) [with Ret = double; Fn = main(int, char**)::<lambda(double)>]':
conftest.cpp:164:16:   required from here
conftest.cpp:164:16: error: template argument for 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)' uses local type 'main(int, char**)::<lambda(double)>'
  164 |   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
      |           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conftest.cpp:164:16: error:   trying to instantiate 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)'
conftest.cpp:169:20: error: 'sum' has not been declared in 'cxx11test'
  169 |   using cxx11test::sum;
      |                    ^~~
conftest.cpp:170:8: error: 'a' does not name a type
  170 |   auto a = sum(1);
      |        ^
conftest.cpp:171:8: error: 'b' does not name a type
  171 |   auto b = sum(1, 2);
      |        ^
conftest.cpp:172:8: error: 'c' does not name a type
  172 |   auto c = sum(1.0, 2.0, 3.0);
      |        ^
conftest.cpp:177:25: warning: empty parentheses were disambiguated as a function declaration [-Wvexing-parse]
  177 |   cxx11test::delegate d2();
      |                         ^~
conftest.cpp:177:25: note: remove parentheses to default-initialize a variable
  177 |   cxx11test::delegate d2();
      |                         ^~
      |                         --
conftest.cpp:186:13: error: 'nullptr' was not declared in this scope
  186 |   char *c = nullptr;
      |             ^~~~~~~
conftest.cpp:190:36: error: '>>' should be '> >' within a nested template argument list
  190 |   test_template<::test_template<int>> v(test_template<int>(12));
      |                                    ^~
      |                                    > >
conftest.cpp:190:16: error: '<::' cannot begin a template-argument list [-fpermissive]
  190 |   test_template<::test_template<int>> v(test_template<int>(12));
      |                ^~
conftest.cpp:190:16: note: '<:' is an alternate spelling for '['. Insert whitespace between '<' and '::'
conftest.cpp:190:16: note: (if you use '-fpermissive' or '-std=c++11', or '-std=gnu++11' G++ will accept your code)
conftest.cpp:194:22: error: 'u8' was not declared in this scope; did you mean 'utf8'?
  194 |   char const *utf8 = u8"UTF-8 string \u2500";
      |                      ^~
      |                      utf8
conftest.cpp:195:3: error: 'char16_t' was not declared in this scope
  195 |   char16_t const *utf16 = u"UTF-8 string \u2500";
      |   ^~~~~~~~
conftest.cpp:196:3: error: 'char32_t' was not declared in this scope
  196 |   char32_t const *utf32 = U"UTF-32 string \u2500";
      |   ^~~~~~~~
configure:3542: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "THIS_IS_SHORE_KITS"
| #define PACKAGE_TARNAME "this_is_shore_kits"
| #define PACKAGE_VERSION "2.1"
| #define PACKAGE_STRING "THIS_IS_SHORE_KITS 2.1"
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "this_is_shore_kits"
| #define VERSION "2.1"
| /* end confdefs.h.  */
| 
| // Does the compiler advertise C++98 conformance?
| #if !defined __cplusplus || __cplusplus < 199711L
| # error "Compiler does not advertise C++98 conformance"
| #endif
| 
| // These inclusions are to reject old compilers that
| // lack the unsuffixed header files.
| #include <cstdlib>
| #include <exception>
| 
| // <cassert> and <cstring> are *not* freestanding headers in C++98.
| extern void assert (int);
| namespace std {
|   extern int strcmp (const char *, const char *);
| }
| 
| // Namespaces, exceptions, and templates were all added after "C++ 2.0".
| using std::exception;
| using std::strcmp;
| 
| namespace {
| 
| void test_exception_syntax()
| {
|   try {
|     throw "test";
|   } catch (const char *s) {
|     // Extra parentheses suppress a warning when building autoconf itself,
|     // due to lint rules shared with more typical C programs.
|     assert (!(strcmp) (s, "test"));
|   }
| }
| 
| template <typename T> struct test_template
| {
|   T const val;
|   explicit test_template(T t) : val(t) {}
|   template <typename U> T add(U u) { return static_cast<T>(u) + val; }
| };
| 
| } // anonymous namespace
| 
| 
| // Does the compiler advertise C++ 2011 conformance?
| #if !defined __cplusplus || __cplusplus < 201103L
| # error "Compiler does not advertise C++11 conformance"
| #endif
| 
| namespace cxx11test
| {
|   constexpr int get_val() { return 20; }
| 
|   struct testinit
|   {
|     int i;
|     double d;
|   };
| 
|   class delegate
|   {
|   public:
|     delegate(int n) : n(n) {}
|     delegate(): delegate(2354) {}
| 
|     virtual int getval() { return this->n; };
|   protected:
|     int n;
|   };
| 
|   class overridden : public delegate
|   {
|   public:
|     overridden(int n): delegate(n) {}
|     virtual int getval() override final { return this->n * 2; }
|   };
| 
|   class nocopy
|   {
|   public:
|     nocopy(int i): i(i) {}
|     nocopy() = default;
|     nocopy(const nocopy&) = delete;
|     nocopy & operator=(const nocopy&) = delete;
|   private:
|     int i;
|   };
| 
|   // for testing lambda expressions
|   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
|   {
|     return f(v);
|   }
| 
|   // for testing variadic templates and trailing return types
|   template <typename V> auto sum(V first) -> V
|   {
|     return first;
|   }
|   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
|   {
|     return first + sum(rest...);
|   }
| }
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
|   assert (argc);
|   assert (! argv[0]);
| {
|   test_exception_syntax ();
|   test_template<double> tt (2.0);
|   assert (tt.add (4) == 6.0);
|   assert (true && !false);
| }
| 
|   
| {
|   // Test auto and decltype
|   auto a1 = 6538;
|   auto a2 = 48573953.4;
|   auto a3 = "String literal";
| 
|   int total = 0;
|   for (auto i = a3; *i; ++i) { total += *i; }
| 
|   decltype(a2) a4 = 34895.034;
| }
| {
|   // Test constexpr
|   short sa[cxx11test::get_val()] = { 0 };
| }
| {
|   // Test initializer lists
|   cxx11test::testinit il = { 4323, 435234.23544 };
| }
| {
|   // Test range-based for
|   int array[] = {9, 7, 13, 15, 4, 18, 12, 10, 5, 3,
|                  14, 19, 17, 8, 6, 20, 16, 2, 11, 1};
|   for (auto &x : array) { x += 23; }
| }
| {
|   // Test lambda expressions
|   using cxx11test::eval;
|   assert (eval ([](int x) { return x*2; }, 21) == 42);
|   double d = 2.0;
|   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
|   assert (d == 5.0);
|   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
|   assert (d == 5.0);
| }
| {
|   // Test use of variadic templates
|   using cxx11test::sum;
|   auto a = sum(1);
|   auto b = sum(1, 2);
|   auto c = sum(1.0, 2.0, 3.0);
| }
| {
|   // Test constructor delegation
|   cxx11test::delegate d1;
|   cxx11test::delegate d2();
|   cxx11test::delegate d3(45);
| }
| {
|   // Test override and final
|   cxx11test::overridden o1(55464);
| }
| {
|   // Test nullptr
|   char *c = nullptr;
| }
| {
|   // Test template brackets
|   test_template<::test_template<int>> v(test_template<int>(12));
| }
| {
|   // Unicode literals
|   char const *utf8 = u8"UTF-8 string \u2500";
|   char16_t const *utf16 = u"UTF-8 string \u2500";
|   char32_t const *utf32 = U"UTF-32 string \u2500";
| }
| 
|   return ok;
| }
| 
configure:3542: g++ -std=c++0x -c -std=c++98 -g  conftest.cpp >&5
conftest.cpp:57:3: error: #error "Compiler does not advertise C++11 conformance"
   57 | # error "Compiler does not advertise C++11 conformance"
      |   ^~~~~
conftest.cpp:62:3: error: 'constexpr' does not name a type
   62 |   constexpr int get_val() { return 20; }
      |   ^~~~~~~~~
conftest.cpp:62:3: note: C++11 'constexpr' only available with '-std=c++11' or '-std=gnu++11'
conftest.cpp: In constructor 'cxx11test::delegate::delegate()':
conftest.cpp:74:30: warning: delegating constructors only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
   74 |     delegate(): delegate(2354) {}
      |                              ^
conftest.cpp: At global scope:
conftest.cpp:85:24: warning: override controls (override/final) only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
   85 |     virtual int getval() override final { return this->n * 2; }
      |                        ^
conftest.cpp:85:26: warning: override controls (override/final) only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
   85 |     virtual int getval() override final { return this->n * 2; }
      |                          ^~~~~~~~
conftest.cpp:92:16: warning: defaulted and deleted functions only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
   92 |     nocopy() = default;
      |                ^~~~~~~
conftest.cpp:93:29: warning: defaulted and deleted functions only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
   93 |     nocopy(const nocopy&) = delete;
      |                             ^~~~~~
conftest.cpp:94:41: warning: defaulted and deleted functions only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
   94 |     nocopy & operator=(const nocopy&) = delete;
      |                                         ^~~~~~
conftest.cpp:106:30: error: ISO C++ forbids declaration of 'sum' with no type [-fpermissive]
  106 |   template <typename V> auto sum(V first) -> V
      |                              ^~~
conftest.cpp:106:25: error: top-level declaration of 'sum' specifies 'auto'
  106 |   template <typename V> auto sum(V first) -> V
      |                         ^~~~
conftest.cpp:106:46: error: trailing return type only available with '-std=c++11' or '-std=gnu++11'
  106 |   template <typename V> auto sum(V first) -> V
      |                                              ^
conftest.cpp:110:33: warning: variadic templates only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
  110 |   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
      |                                 ^~~
conftest.cpp:110:69: warning: variadic templates only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
  110 |   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
      |                                                                     ^~~~
conftest.cpp:110:48: error: ISO C++ forbids declaration of 'sum' with no type [-fpermissive]
  110 |   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
      |                                                ^~~
conftest.cpp:110:43: error: top-level declaration of 'sum' specifies 'auto'
  110 |   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
      |                                           ^~~~
conftest.cpp:110:78: error: trailing return type only available with '-std=c++11' or '-std=gnu++11'
  110 |   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
      |                                                                              ^
conftest.cpp: In function 'int main(int, char**)':
conftest.cpp:134:8: error: 'a1' does not name a type
  134 |   auto a1 = 6538;
      |        ^~
conftest.cpp:135:8: error: 'a2' does not name a type
  135 |   auto a2 = 48573953.4;
      |        ^~
conftest.cpp:136:8: error: 'a3' does not name a type
  136 |   auto a3 = "String literal";
      |        ^~
conftest.cpp:139:13: error: 'i' does not name a type
  139 |   for (auto i = a3; *i; ++i) { total += *i; }
      |             ^
conftest.cpp:139:20: error: expected ';' before '*' token
  139 |   for (auto i = a3; *i; ++i) { total += *i; }
      |                    ^~
      |                    ;
conftest.cpp:139:22: error: 'i' was not declared in this scope
  139 |   for (auto i = a3; *i; ++i) { total += *i; }
      |                      ^
conftest.cpp:141:12: error: 'a2' was not declared in this scope
  141 |   decltype(a2) a4 = 34895.034;
      |            ^~
conftest.cpp:141:3: error: 'decltype' was not declared in this scope
  141 |   decltype(a2) a4 = 34895.034;
      |   ^~~~~~~~
conftest.cpp:145:23: error: 'get_val' is not a member of 'cxx11test'; did you mean 'eval'?
  145 |   short sa[cxx11test::get_val()] = { 0 };
      |                       ^~~~~~~
      |                       eval
conftest.cpp:155:14: error: ISO C++ forbids declaration of 'x' with no type [-fpermissive]
  155 |   for (auto &x : array) { x += 23; }
      |              ^
conftest.cpp:155:18: warning: range-based 'for' loops only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
  155 |   for (auto &x : array) { x += 23; }
      |                  ^~~~~
conftest.cpp:155:18: error: forming reference to reference type 'int (&)[20]'
conftest.cpp:160:41: warning: lambda expressions only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
  160 |   assert (eval ([](int x) { return x*2; }, 21) == 42);
      |                                         ^
conftest.cpp:160:16: error: no matching function for call to 'eval(main(int, char**)::<lambda(int)>, int)'
  160 |   assert (eval ([](int x) { return x*2; }, 21) == 42);
      |           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conftest.cpp:100:44: note: candidate: 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)'
  100 |   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
      |                                            ^~~~
conftest.cpp:100:44: note:   template argument deduction/substitution failed:
conftest.cpp: In substitution of 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret) [with Ret = int; Fn = main(int, char**)::<lambda(int)>]':
conftest.cpp:160:16:   required from here
conftest.cpp:160:16: error: template argument for 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)' uses local type 'main(int, char**)::<lambda(int)>'
  160 |   assert (eval ([](int x) { return x*2; }, 21) == 42);
      |           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conftest.cpp:160:16: error:   trying to instantiate 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)'
conftest.cpp:162:48: warning: lambda expressions only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
  162 |   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
      |                                                ^
conftest.cpp:162:16: error: no matching function for call to 'eval(main(int, char**)::<lambda(double)>, double)'
  162 |   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
      |           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conftest.cpp:100:44: note: candidate: 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)'
  100 |   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
      |                                            ^~~~
conftest.cpp:100:44: note:   template argument deduction/substitution failed:
conftest.cpp: In substitution of 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret) [with Ret = double; Fn = main(int, char**)::<lambda(double)>]':
conftest.cpp:162:16:   required from here
conftest.cpp:162:16: error: template argument for 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)' uses local type 'main(int, char**)::<lambda(double)>'
  162 |   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
      |           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conftest.cpp:162:16: error:   trying to instantiate 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)'
conftest.cpp:164:56: warning: lambda expressions only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
  164 |   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
      |                                                        ^
conftest.cpp:164:16: error: no matching function for call to 'eval(main(int, char**)::<lambda(double)>, double)'
  164 |   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
      |           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conftest.cpp:100:44: note: candidate: 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)'
  100 |   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
      |                                            ^~~~
conftest.cpp:100:44: note:   template argument deduction/substitution failed:
conftest.cpp: In substitution of 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret) [with Ret = double; Fn = main(int, char**)::<lambda(double)>]':
conftest.cpp:164:16:   required from here
conftest.cpp:164:16: error: template argument for 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)' uses local type 'main(int, char**)::<lambda(double)>'
  164 |   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
      |           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conftest.cpp:164:16: error:   trying to instantiate 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)'
conftest.cpp:169:20: error: 'sum' has not been declared in 'cxx11test'
  169 |   using cxx11test::sum;
      |                    ^~~
conftest.cpp:170:8: error: 'a' does not name a type
  170 |   auto a = sum(1);
      |        ^
conftest.cpp:171:8: error: 'b' does not name a type
  171 |   auto b = sum(1, 2);
      |        ^
conftest.cpp:172:8: error: 'c' does not name a type
  172 |   auto c = sum(1.0, 2.0, 3.0);
      |        ^
conftest.cpp:177:25: warning: empty parentheses were disambiguated as a function declaration [-Wvexing-parse]
  177 |   cxx11test::delegate d2();
      |                         ^~
conftest.cpp:177:25: note: remove parentheses to default-initialize a variable
  177 |   cxx11test::delegate d2();
      |                         ^~
      |                         --
conftest.cpp:186:13: error: 'nullptr' was not declared in this scope
  186 |   char *c = nullptr;
      |             ^~~~~~~
conftest.cpp:190:36: error: '>>' should be '> >' within a nested template argument list
  190 |   test_template<::test_template<int>> v(test_template<int>(12));
      |                                    ^~
      |                                    > >
conftest.cpp:190:16: error: '<::' cannot begin a template-argument list [-fpermissive]
  190 |   test_template<::test_template<int>> v(test_template<int>(12));
      |                ^~
conftest.cpp:190:16: note: '<:' is an alternate spelling for '['. Insert whitespace between '<' and '::'
conftest.cpp:190:16: note: (if you use '-fpermissive' or '-std=c++11', or '-std=gnu++11' G++ will accept your code)
conftest.cpp:194:22: error: 'u8' was not declared in this scope; did you mean 'utf8'?
  194 |   char const *utf8 = u8"UTF-8 string \u2500";
      |                      ^~
      |                      utf8
conftest.cpp:195:3: error: 'char16_t' was not declared in this scope
  195 |   char16_t const *utf16 = u"UTF-8 string \u2500";
      |   ^~~~~~~~
conftest.cpp:196:3: error: 'char32_t' was not declared in this scope
  196 |   char32_t const *utf32 = U"UTF-32 string \u2500";
      |   ^~~~~~~~
configure:3542: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "THIS_IS_SHORE_KITS"
| #define PACKAGE_TARNAME "this_is_shore_kits"
| #define PACKAGE_VERSION "2.1"
| #define PACKAGE_STRING "THIS_IS_SHORE_KITS 2.1"
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "this_is_shore_kits"
| #define VERSION "2.1"
| /* end confdefs.h.  */
| 
| // Does the compiler advertise C++98 conformance?
| #if !defined __cplusplus || __cplusplus < 199711L
| # error "Compiler does not advertise C++98 conformance"
| #endif
| 
| // These inclusions are to reject old compilers that
| // lack the unsuffixed header files.
| #include <cstdlib>
| #include <exception>
| 
| // <cassert> and <cstring> are *not* freestanding headers in C++98.
| extern void assert (int);
| namespace std {
|   extern int strcmp (const char *, const char *);
| }
| 
| // Namespaces, exceptions, and templates were all added after "C++ 2.0".
| using std::exception;
| using std::strcmp;
| 
| namespace {
| 
| void test_exception_syntax()
| {
|   try {
|     throw "test";
|   } catch (const char *s) {
|     // Extra parentheses suppress a warning when building autoconf itself,
|     // due to lint rules shared with more typical C programs.
|     assert (!(strcmp) (s, "test"));
|   }
| }
| 
| template <typename T> struct test_template
| {
|   T const val;
|   explicit test_template(T t) : val(t) {}
|   template <typename U> T add(U u) { return static_cast<T>(u) + val; }
| };
| 
| } // anonymous namespace
| 
| 
| // Does the compiler advertise C++ 2011 conformance?
| #if !defined __cplusplus || __cplusplus < 201103L
| # error "Compiler does not advertise C++11 conformance"
| #endif
| 
| namespace cxx11test
| {
|   constexpr int get_val() { return 20; }
| 
|   struct testinit
|   {
|     int i;
|     double d;
|   };
| 
|   class delegate
|   {
|   public:
|     delegate(int n) : n(n) {}
|     delegate(): delegate(2354) {}
| 
|     virtual int getval() { return this->n; };
|   protected:
|     int n;
|   };
| 
|   class overridden : public delegate
|   {
|   public:
|     overridden(int n): delegate(n) {}
|     virtual int getval() override final { return this->n * 2; }
|   };
| 
|   class nocopy
|   {
|   public:
|     nocopy(int i): i(i) {}
|     nocopy() = default;
|     nocopy(const nocopy&) = delete;
|     nocopy & operator=(const nocopy&) = delete;
|   private:
|     int i;
|   };
| 
|   // for testing lambda expressions
|   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
|   {
|     return f(v);
|   }
| 
|   // for testing variadic templates and trailing return types
|   template <typename V> auto sum(V first) -> V
|   {
|     return first;
|   }
|   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
|   {
|     return first + sum(rest...);
|   }
| }
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
|   assert (argc);
|   assert (! argv[0]);
| {
|   test_exception_syntax ();
|   test_template<double> tt (2.0);
|   assert (tt.add (4) == 6.0);
|   assert (true && !false);
| }
| 
|   
| {
|   // Test auto and decltype
|   auto a1 = 6538;
|   auto a2 = 48573953.4;
|   auto a3 = "String literal";
| 
|   int total = 0;
|   for (auto i = a3; *i; ++i) { total += *i; }
| 
|   decltype(a2) a4 = 34895.034;
| }
| {
|   // Test constexpr
|   short sa[cxx11test::get_val()] = { 0 };
| }
| {
|   // Test initializer lists
|   cxx11test::testinit il = { 4323, 435234.23544 };
| }
| {
|   // Test range-based for
|   int array[] = {9, 7, 13, 15, 4, 18, 12, 10, 5, 3,
|                  14, 19, 17, 8, 6, 20, 16, 2, 11, 1};
|   for (auto &x : array) { x += 23; }
| }
| {
|   // Test lambda expressions
|   using cxx11test::eval;
|   assert (eval ([](int x) { return x*2; }, 21) == 42);
|   double d = 2.0;
|   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
|   assert (d == 5.0);
|   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
|   assert (d == 5.0);
| }
| {
|   // Test use of variadic templates
|   using cxx11test::sum;
|   auto a = sum(1);
|   auto b = sum(1, 2);
|   auto c = sum(1.0, 2.0, 3.0);
| }
| {
|   // Test constructor delegation
|   cxx11test::delegate d1;
|   cxx11test::delegate d2();
|   cxx11test::delegate d3(45);
| }
| {
|   // Test override and final
|   cxx11test::overridden o1(55464);
| }
| {
|   // Test nullptr
|   char *c = nullptr;
| }
| {
|   // Test template brackets
|   test_template<::test_template<int>> v(test_template<int>(12));
| }
| {
|   // Unicode literals
|   char const *utf8 = u8"UTF-8 string \u2500";
|   char16_t const *utf16 = u"UTF-8 string \u2500";
|   char32_t const *utf32 = U"UTF-32 string \u2500";
| }
| 
|   return ok;
| }
| 
configure:3542: g++ -qlanglvl=extended0x -c -std=c++98 -g  conftest.cpp >&5
g++: error: unrecognized command-line option '-qlanglvl=extended0x'
configure:3542: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "THIS_IS_SHORE_KITS"
| #define PACKAGE_TARNAME "this_is_shore_kits"
| #define PACKAGE_VERSION "2.1"
| #define PACKAGE_STRING "THIS_IS_SHORE_KITS 2.1"
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "this_is_shore_kits"
| #define VERSION "2.1"
| /* end confdefs.h.  */
| 
| // Does the compiler advertise C++98 conformance?
| #if !defined __cplusplus || __cplusplus < 199711L
| # error "Compiler does not advertise C++98 conformance"
| #endif
| 
| // These inclusions are to reject old compilers that
| // lack the unsuffixed header files.
| #include <cstdlib>
| #include <exception>
| 
| // <cassert> and <cstring> are *not* freestanding headers in C++98.
| extern void assert (int);
| namespace std {
|   extern int strcmp (const char *, const char *);
| }
| 
| // Namespaces, exceptions, and templates were all added after "C++ 2.0".
| using std::exception;
| using std::strcmp;
| 
| namespace {
| 
| void test_exception_syntax()
| {
|   try {
|     throw "test";
|   } catch (const char *s) {
|     // Extra parentheses suppress a warning when building autoconf itself,
|     // due to lint rules shared with more typical C programs.
|     assert (!(strcmp) (s, "test"));
|   }
| }
| 
| template <typename T> struct test_template
| {
|   T const val;
|   explicit test_template(T t) : val(t) {}
|   template <typename U> T add(U u) { return static_cast<T>(u) + val; }
| };
| 
| } // anonymous namespace
| 
| 
| // Does the compiler advertise C++ 2011 conformance?
| #if !defined __cplusplus || __cplusplus < 201103L
| # error "Compiler does not advertise C++11 conformance"
| #endif
| 
| namespace cxx11test
| {
|   constexpr int get_val() { return 20; }
| 
|   struct testinit
|   {
|     int i;
|     double d;
|   };
| 
|   class delegate
|   {
|   public:
|     delegate(int n) : n(n) {}
|     delegate(): delegate(2354) {}
| 
|     virtual int getval() { return this->n; };
|   protected:
|     int n;
|   };
| 
|   class overridden : public delegate
|   {
|   public:
|     overridden(int n): delegate(n) {}
|     virtual int getval() override final { return this->n * 2; }
|   };
| 
|   class nocopy
|   {
|   public:
|     nocopy(int i): i(i) {}
|     nocopy() = default;
|     nocopy(const nocopy&) = delete;
|     nocopy & operator=(const nocopy&) = delete;
|   private:
|     int i;
|   };
| 
|   // for testing lambda expressions
|   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
|   {
|     return f(v);
|   }
| 
|   // for testing variadic templates and trailing return types
|   template <typename V> auto sum(V first) -> V
|   {
|     return first;
|   }
|   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
|   {
|     return first + sum(rest...);
|   }
| }
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
|   assert (argc);
|   assert (! argv[0]);
| {
|   test_exception_syntax ();
|   test_template<double> tt (2.0);
|   assert (tt.add (4) == 6.0);
|   assert (true && !false);
| }
| 
|   
| {
|   // Test auto and decltype
|   auto a1 = 6538;
|   auto a2 = 48573953.4;
|   auto a3 = "String literal";
| 
|   int total = 0;
|   for (auto i = a3; *i; ++i) { total += *i; }
| 
|   decltype(a2) a4 = 34895.034;
| }
| {
|   // Test constexpr
|   short sa[cxx11test::get_val()] = { 0 };
| }
| {
|   // Test initializer lists
|   cxx11test::testinit il = { 4323, 435234.23544 };
| }
| {
|   // Test range-based for
|   int array[] = {9, 7, 13, 15, 4, 18, 12, 10, 5, 3,
|                  14, 19, 17, 8, 6, 20, 16, 2, 11, 1};
|   for (auto &x : array) { x += 23; }
| }
| {
|   // Test lambda expressions
|   using cxx11test::eval;
|   assert (eval ([](int x) { return x*2; }, 21) == 42);
|   double d = 2.0;
|   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
|   assert (d == 5.0);
|   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
|   assert (d == 5.0);
| }
| {
|   // Test use of variadic templates
|   using cxx11test::sum;
|   auto a = sum(1);
|   auto b = sum(1, 2);
|   auto c = sum(1.0, 2.0, 3.0);
| }
| {
|   // Test constructor delegation
|   cxx11test::delegate d1;
|   cxx11test::delegate d2();
|   cxx11test::delegate d3(45);
| }
| {
|   // Test override and final
|   cxx11test::overridden o1(55464);
| }
| {
|   // Test nullptr
|   char *c = nullptr;
| }
| {
|   // Test template brackets
|   test_template<::test_template<int>> v(test_template<int>(12));
| }
| {
|   // Unicode literals
|   char const *utf8 = u8"UTF-8 string \u2500";
|   char16_t const *utf16 = u"UTF-8 string \u2500";
|   char32_t const *utf32 = U"UTF-32 string \u2500";
| }
| 
|   return ok;
| }
| 
configure:3542: g++ -AA -c -std=c++98 -g  conftest.cpp >&5
<command-line>: error: missing '(' after predicate
conftest.cpp:57:3: error: #error "Compiler does not advertise C++11 conformance"
   57 | # error "Compiler does not advertise C++11 conformance"
      |   ^~~~~
conftest.cpp:62:3: error: 'constexpr' does not name a type
   62 |   constexpr int get_val() { return 20; }
      |   ^~~~~~~~~
conftest.cpp:62:3: note: C++11 'constexpr' only available with '-std=c++11' or '-std=gnu++11'
conftest.cpp: In constructor 'cxx11test::delegate::delegate()':
conftest.cpp:74:30: warning: delegating constructors only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
   74 |     delegate(): delegate(2354) {}
      |                              ^
conftest.cpp: At global scope:
conftest.cpp:85:24: warning: override controls (override/final) only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
   85 |     virtual int getval() override final { return this->n * 2; }
      |                        ^
conftest.cpp:85:26: warning: override controls (override/final) only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
   85 |     virtual int getval() override final { return this->n * 2; }
      |                          ^~~~~~~~
conftest.cpp:92:16: warning: defaulted and deleted functions only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
   92 |     nocopy() = default;
      |                ^~~~~~~
conftest.cpp:93:29: warning: defaulted and deleted functions only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
   93 |     nocopy(const nocopy&) = delete;
      |                             ^~~~~~
conftest.cpp:94:41: warning: defaulted and deleted functions only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
   94 |     nocopy & operator=(const nocopy&) = delete;
      |                                         ^~~~~~
conftest.cpp:106:30: error: ISO C++ forbids declaration of 'sum' with no type [-fpermissive]
  106 |   template <typename V> auto sum(V first) -> V
      |                              ^~~
conftest.cpp:106:25: error: top-level declaration of 'sum' specifies 'auto'
  106 |   template <typename V> auto sum(V first) -> V
      |                         ^~~~
conftest.cpp:106:46: error: trailing return type only available with '-std=c++11' or '-std=gnu++11'
  106 |   template <typename V> auto sum(V first) -> V
      |                                              ^
conftest.cpp:110:33: warning: variadic templates only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
  110 |   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
      |                                 ^~~
conftest.cpp:110:69: warning: variadic templates only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
  110 |   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
      |                                                                     ^~~~
conftest.cpp:110:48: error: ISO C++ forbids declaration of 'sum' with no type [-fpermissive]
  110 |   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
      |                                                ^~~
conftest.cpp:110:43: error: top-level declaration of 'sum' specifies 'auto'
  110 |   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
      |                                           ^~~~
conftest.cpp:110:78: error: trailing return type only available with '-std=c++11' or '-std=gnu++11'
  110 |   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
      |                                                                              ^
conftest.cpp: In function 'int main(int, char**)':
conftest.cpp:134:8: error: 'a1' does not name a type
  134 |   auto a1 = 6538;
      |        ^~
conftest.cpp:135:8: error: 'a2' does not name a type
  135 |   auto a2 = 48573953.4;
      |        ^~
conftest.cpp:136:8: error: 'a3' does not name a type
  136 |   auto a3 = "String literal";
      |        ^~
conftest.cpp:139:13: error: 'i' does not name a type
  139 |   for (auto i = a3; *i; ++i) { total += *i; }
      |             ^
conftest.cpp:139:20: error: expected ';' before '*' token
  139 |   for (auto i = a3; *i; ++i) { total += *i; }
      |                    ^~
      |                    ;
conftest.cpp:139:22: error: 'i' was not declared in this scope
  139 |   for (auto i = a3; *i; ++i) { total += *i; }
      |                      ^
conftest.cpp:141:12: error: 'a2' was not declared in this scope
  141 |   decltype(a2) a4 = 34895.034;
      |            ^~
conftest.cpp:141:3: error: 'decltype' was not declared in this scope
  141 |   decltype(a2) a4 = 34895.034;
      |   ^~~~~~~~
conftest.cpp:145:23: error: 'get_val' is not a member of 'cxx11test'; did you mean 'eval'?
  145 |   short sa[cxx11test::get_val()] = { 0 };
      |                       ^~~~~~~
      |                       eval
conftest.cpp:155:14: error: ISO C++ forbids declaration of 'x' with no type [-fpermissive]
  155 |   for (auto &x : array) { x += 23; }
      |              ^
conftest.cpp:155:18: warning: range-based 'for' loops only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
  155 |   for (auto &x : array) { x += 23; }
      |                  ^~~~~
conftest.cpp:155:18: error: forming reference to reference type 'int (&)[20]'
conftest.cpp:160:41: warning: lambda expressions only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
  160 |   assert (eval ([](int x) { return x*2; }, 21) == 42);
      |                                         ^
conftest.cpp:160:16: error: no matching function for call to 'eval(main(int, char**)::<lambda(int)>, int)'
  160 |   assert (eval ([](int x) { return x*2; }, 21) == 42);
      |           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conftest.cpp:100:44: note: candidate: 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)'
  100 |   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
      |                                            ^~~~
conftest.cpp:100:44: note:   template argument deduction/substitution failed:
conftest.cpp: In substitution of 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret) [with Ret = int; Fn = main(int, char**)::<lambda(int)>]':
conftest.cpp:160:16:   required from here
conftest.cpp:160:16: error: template argument for 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)' uses local type 'main(int, char**)::<lambda(int)>'
  160 |   assert (eval ([](int x) { return x*2; }, 21) == 42);
      |           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conftest.cpp:160:16: error:   trying to instantiate 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)'
conftest.cpp:162:48: warning: lambda expressions only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
  162 |   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
      |                                                ^
conftest.cpp:162:16: error: no matching function for call to 'eval(main(int, char**)::<lambda(double)>, double)'
  162 |   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
      |           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conftest.cpp:100:44: note: candidate: 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)'
  100 |   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
      |                                            ^~~~
conftest.cpp:100:44: note:   template argument deduction/substitution failed:
conftest.cpp: In substitution of 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret) [with Ret = double; Fn = main(int, char**)::<lambda(double)>]':
conftest.cpp:162:16:   required from here
conftest.cpp:162:16: error: template argument for 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)' uses local type 'main(int, char**)::<lambda(double)>'
  162 |   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
      |           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conftest.cpp:162:16: error:   trying to instantiate 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)'
conftest.cpp:164:56: warning: lambda expressions only available with '-std=c++11' or '-std=gnu++11' [-Wc++11-extensions]
  164 |   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
      |                                                        ^
conftest.cpp:164:16: error: no matching function for call to 'eval(main(int, char**)::<lambda(double)>, double)'
  164 |   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
      |           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conftest.cpp:100:44: note: candidate: 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)'
  100 |   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
      |                                            ^~~~
conftest.cpp:100:44: note:   template argument deduction/substitution failed:
conftest.cpp: In substitution of 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret) [with Ret = double; Fn = main(int, char**)::<lambda(double)>]':
conftest.cpp:164:16:   required from here
conftest.cpp:164:16: error: template argument for 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)' uses local type 'main(int, char**)::<lambda(double)>'
  164 |   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
      |           ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
conftest.cpp:164:16: error:   trying to instantiate 'template<class Ret, class Fn> Ret cxx11test::eval(Fn, Ret)'
conftest.cpp:169:20: error: 'sum' has not been declared in 'cxx11test'
  169 |   using cxx11test::sum;
      |                    ^~~
conftest.cpp:170:8: error: 'a' does not name a type
  170 |   auto a = sum(1);
      |        ^
conftest.cpp:171:8: error: 'b' does not name a type
  171 |   auto b = sum(1, 2);
      |        ^
conftest.cpp:172:8: error: 'c' does not name a type
  172 |   auto c = sum(1.0, 2.0, 3.0);
      |        ^
conftest.cpp:177:25: warning: empty parentheses were disambiguated as a function declaration [-Wvexing-parse]
  177 |   cxx11test::delegate d2();
      |                         ^~
conftest.cpp:177:25: note: remove parentheses to default-initialize a variable
  177 |   cxx11test::delegate d2();
      |                         ^~
      |                         --
conftest.cpp:186:13: error: 'nullptr' was not declared in this scope
  186 |   char *c = nullptr;
      |             ^~~~~~~
conftest.cpp:190:36: error: '>>' should be '> >' within a nested template argument list
  190 |   test_template<::test_template<int>> v(test_template<int>(12));
      |                                    ^~
      |                                    > >
conftest.cpp:190:16: error: '<::' cannot begin a template-argument list [-fpermissive]
  190 |   test_template<::test_template<int>> v(test_template<int>(12));
      |                ^~
conftest.cpp:190:16: note: '<:' is an alternate spelling for '['. Insert whitespace between '<' and '::'
conftest.cpp:190:16: note: (if you use '-fpermissive' or '-std=c++11', or '-std=gnu++11' G++ will accept your code)
conftest.cpp:194:22: error: 'u8' was not declared in this scope; did you mean 'utf8'?
  194 |   char const *utf8 = u8"UTF-8 string \u2500";
      |                      ^~
      |                      utf8
conftest.cpp:195:3: error: 'char16_t' was not declared in this scope
  195 |   char16_t const *utf16 = u"UTF-8 string \u2500";
      |   ^~~~~~~~
conftest.cpp:196:3: error: 'char32_t' was not declared in this scope
  196 |   char32_t const *utf32 = U"UTF-32 string \u2500";
      |   ^~~~~~~~
configure:3542: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "THIS_IS_SHORE_KITS"
| #define PACKAGE_TARNAME "this_is_shore_kits"
| #define PACKAGE_VERSION "2.1"
| #define PACKAGE_STRING "THIS_IS_SHORE_KITS 2.1"
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "this_is_shore_kits"
| #define VERSION "2.1"
| /* end confdefs.h.  */
| 
| // Does the compiler advertise C++98 conformance?
| #if !defined __cplusplus || __cplusplus < 199711L
| # error "Compiler does not advertise C++98 conformance"
| #endif
| 
| // These inclusions are to reject old compilers that
| // lack the unsuffixed header files.
| #include <cstdlib>
| #include <exception>
| 
| // <cassert> and <cstring> are *not* freestanding headers in C++98.
| extern void assert (int);
| namespace std {
|   extern int strcmp (const char *, const char *);
| }
| 
| // Namespaces, exceptions, and templates were all added after "C++ 2.0".
| using std::exception;
| using std::strcmp;
| 
| namespace {
| 
| void test_exception_syntax()
| {
|   try {
|     throw "test";
|   } catch (const char *s) {
|     // Extra parentheses suppress a warning when building autoconf itself,
|     // due to lint rules shared with more typical C programs.
|     assert (!(strcmp) (s, "test"));
|   }
| }
| 
| template <typename T> struct test_template
| {
|   T const val;
|   explicit test_template(T t) : val(t) {}
|   template <typename U> T add(U u) { return static_cast<T>(u) + val; }
| };
| 
| } // anonymous namespace
| 
| 
| // Does the compiler advertise C++ 2011 conformance?
| #if !defined __cplusplus || __cplusplus < 201103L
| # error "Compiler does not advertise C++11 conformance"
| #endif
| 
| namespace cxx11test
| {
|   constexpr int get_val() { return 20; }
| 
|   struct testinit
|   {
|     int i;
|     double d;
|   };
| 
|   class delegate
|   {
|   public:
|     delegate(int n) : n(n) {}
|     delegate(): delegate(2354) {}
| 
|     virtual int getval() { return this->n; };
|   protected:
|     int n;
|   };
| 
|   class overridden : public delegate
|   {
|   public:
|     overridden(int n): delegate(n) {}
|     virtual int getval() override final { return this->n * 2; }
|   };
| 
|   class nocopy
|   {
|   public:
|     nocopy(int i): i(i) {}
|     nocopy() = default;
|     nocopy(const nocopy&) = delete;
|     nocopy & operator=(const nocopy&) = delete;
|   private:
|     int i;
|   };
| 
|   // for testing lambda expressions
|   template <typename Ret, typename Fn> Ret eval(Fn f, Ret v)
|   {
|     return f(v);
|   }
| 
|   // for testing variadic templates and trailing return types
|   template <typename V> auto sum(V first) -> V
|   {
|     return first;
|   }
|   template <typename V, typename... Args> auto sum(V first, Args... rest) -> V
|   {
|     return first + sum(rest...);
|   }
| }
| 
| 
| int
| main (int argc, char **argv)
| {
|   int ok = 0;
|   
|   assert (argc);
|   assert (! argv[0]);
| {
|   test_exception_syntax ();
|   test_template<double> tt (2.0);
|   assert (tt.add (4) == 6.0);
|   assert (true && !false);
| }
| 
|   
| {
|   // Test auto and decltype
|   auto a1 = 6538;
|   auto a2 = 48573953.4;
|   auto a3 = "String literal";
| 
|   int total = 0;
|   for (auto i = a3; *i; ++i) { total += *i; }
| 
|   decltype(a2) a4 = 34895.034;
| }
| {
|   // Test constexpr
|   short sa[cxx11test::get_val()] = { 0 };
| }
| {
|   // Test initializer lists
|   cxx11test::testinit il = { 4323, 435234.23544 };
| }
| {
|   // Test range-based for
|   int array[] = {9, 7, 13, 15, 4, 18, 12, 10, 5, 3,
|                  14, 19, 17, 8, 6, 20, 16, 2, 11, 1};
|   for (auto &x : array) { x += 23; }
| }
| {
|   // Test lambda expressions
|   using cxx11test::eval;
|   assert (eval ([](int x) { return x*2; }, 21) == 42);
|   double d = 2.0;
|   assert (eval ([&](double x) { return d += x; }, 3.0) == 5.0);
|   assert (d == 5.0);
|   assert (eval ([=](double x) mutable { return d += x; }, 4.0) == 9.0);
|   assert (d == 5.0);
| }
| {
|   // Test use of variadic templates
|   using cxx11test::sum;
|   auto a = sum(1);
|   auto b = sum(1, 2);
|   auto c = sum(1.0, 2.0, 3.0);
| }
| {
|   // Test constructor delegation
|   cxx11test::delegate d1;
|   cxx11test::delegate d2();
|   cxx11test::delegate d3(45);
| }
| {
|   // Test override and final
|   cxx11test::overridden o1(55464);
| }
| {
|   // Test nullptr
|   char *c = nullptr;
| }
| {
|   // Test template brackets
|   test_template<::test_template<int>> v(test_template<int>(12));
| }
| {
|   // Unicode literals
|   char const *utf8 = u8"UTF-8 string \u2500";
|   char16_t const *utf16 = u"UTF-8 string \u2500";
|   char32_t const *utf32 = U"UTF-32 string \u2500";
| }
| 
|   return ok;
| }
| 
configure:3555: result: unsupported
configure:3573: checking for g++ option to enable C++98 features
configure:3588: g++  -c -std=c++98 -g  conftest.cpp >&5
configure:3588: $? = 0
configure:3606: result: none needed
configure:3627: checking whether make supports the include directive
configure:3642: make -f confmf.GNU && cat confinc.out
make[1]: Entering directory '/home/wjy/SComet/benchmarks/Tailbench/tailbench/shore/shore-kits'
make[1]: Leaving directory '/home/wjy/SComet/benchmarks/Tailbench/tailbench/shore/shore-kits'
this is the am__doit target
configure:3645: $? = 0
configure:3664: result: yes (GNU style)
configure:3690: checking dependency style of g++
configure:3802: result: gcc3
configure:3865: checking for ranlib
configure:3886: found /usr/bin/ranlib
configure:3897: result: ranlib
configure:3920: Configuring Shore Kits
configure:3930: checking for grep that handles long lines and -e
configure:3994: result: /usr/bin/grep
configure:3999: checking for egrep
configure:4067: result: /usr/bin/grep -E
configure:4092: checking CXX
configure:4094: result: g++
configure:4140: checking compiler version
configure:4149: result: 13.13.13.3.0
configure:4170: checking Readline location
configure:4177: error: 
            Not valid readline include directory at /usr/include;
            Please run ./configure READLINE_HOME=where readline/readline.h is located

## ---------------- ##
## Cache variables. ##
## ---------------- ##

ac_cv_build=x86_64-pc-linux-gnu
ac_cv_cxx_compiler_gnu=yes
ac_cv_env_CCC_set=
ac_cv_env_CCC_value=
ac_cv_env_CPPFLAGS_set=
ac_cv_env_CPPFLAGS_value=
ac_cv_env_CXXFLAGS_set=set
ac_cv_env_CXXFLAGS_value='-std=c++98 -g'
ac_cv_env_CXX_set=
ac_cv_env_CXX_value=
ac_cv_env_LDFLAGS_set=
ac_cv_env_LDFLAGS_value=
ac_cv_env_LIBS_set=
ac_cv_env_LIBS_value=
ac_cv_env_READLINE_HOME_set=
ac_cv_env_READLINE_HOME_value=
ac_cv_env_SHORE_HOME_set=set
ac_cv_env_SHORE_HOME_value=../shore-mt/
ac_cv_env_build_alias_set=
ac_cv_env_build_alias_value=
ac_cv_env_host_alias_set=
ac_cv_env_host_alias_value=
ac_cv_env_target_alias_set=
ac_cv_env_target_alias_value=
ac_cv_host=x86_64-pc-linux-gnu
ac_cv_objext=o
ac_cv_path_EGREP='/usr/bin/grep -E'
ac_cv_path_GREP=/usr/bin/grep
ac_cv_path_install='/usr/bin/install -c'
ac_cv_path_mkdir=/usr/bin/mkdir
ac_cv_prog_AWK=gawk
ac_cv_prog_ac_ct_CXX=g++
ac_cv_prog_ac_ct_RANLIB=ranlib
ac_cv_prog_cxx_cxx11=no
ac_cv_prog_cxx_cxx98=
ac_cv_prog_cxx_g=yes
ac_cv_prog_cxx_stdcxx=
ac_cv_prog_make_make_set=yes
ac_cv_target=x86_64-pc-linux-gnu
am_cv_CXX_dependencies_compiler_type=gcc3
am_cv_make_support_nested_variables=yes

## ----------------- ##
## Output variables. ##
## ----------------- ##

ACLOCAL='${SHELL} '\''/home/wjy/SComet/benchmarks/Tailbench/tailbench/shore/shore-kits/missing'\'' aclocal-1.16'
ADD_OPT_CACHES_FALSE=''
ADD_OPT_CACHES_TRUE=''
AMDEPBACKSLASH='\'
AMDEP_FALSE='#'
AMDEP_TRUE=''
AMTAR='$${TAR-tar}'
AM_BACKSLASH='\'
AM_DEFAULT_V='$(AM_DEFAULT_VERBOSITY)'
AM_DEFAULT_VERBOSITY='1'
AM_V='$(V)'
ARCHOS=''
AUTOCONF='${SHELL} '\''/home/wjy/SComet/benchmarks/Tailbench/tailbench/shore/shore-kits/missing'\'' autoconf'
AUTOHEADER='${SHELL} '\''/home/wjy/SComet/benchmarks/Tailbench/tailbench/shore/shore-kits/missing'\'' autoheader'
AUTOMAKE='${SHELL} '\''/home/wjy/SComet/benchmarks/Tailbench/tailbench/shore/shore-kits/missing'\'' automake-1.16'
AWK='gawk'
CPPFLAGS=''
CSCOPE='cscope'
CTAGS='ctags'
CXX='g++'
CXXDEPMODE='depmode=gcc3'
CXXFLAGS='-std=c++98 -g'
CYGPATH_W='echo'
DEFS=''
DEPDIR='.deps'
ECHO_C=''
ECHO_N='-n'
ECHO_T=''
EGREP='/usr/bin/grep -E'
ETAGS='etags'
EXEEXT=''
GCC_COMPILER='g++'
GREP='/usr/bin/grep'
INSTALL_DATA='${INSTALL} -m 644'
INSTALL_PROGRAM='${INSTALL}'
INSTALL_SCRIPT='${INSTALL}'
INSTALL_STRIP_PROGRAM='$(install_sh) -c -s'
KITS_HOME=''
KITS_VERSION='shore-kits.2.1'
KITS_VERSION_MAJOR='shore-kits'
KITS_VERSION_MINOR='2'
KITS_VERSION_REV='1'
LDFLAGS=''
LIBOBJS=''
LIBS=''
LINUX_OS_FALSE=''
LINUX_OS_TRUE=''
LTLIBOBJS=''
MAKEINFO='${SHELL} '\''/home/wjy/SComet/benchmarks/Tailbench/tailbench/shore/shore-kits/missing'\'' makeinfo'
MKDIR_P='/usr/bin/mkdir -p'
OBJEXT='o'
PACKAGE='this_is_shore_kits'
PACKAGE_BUGREPORT=''
PACKAGE_NAME='THIS_IS_SHORE_KITS'
PACKAGE_STRING='THIS_IS_SHORE_KITS 2.1'
PACKAGE_TARNAME='this_is_shore_kits'
PACKAGE_URL=''
PACKAGE_VERSION='2.1'
PATH_SEPARATOR=':'
RANLIB='ranlib'
READLINE_HOME='/usr'
SET_MAKE=''
SHELL='/bin/bash'
SHORE_HOME='../shore-mt/'
SPARC_MACHINE_FALSE=''
SPARC_MACHINE_TRUE=''
STRIP=''
USE_BT_FALSE=''
USE_BT_TRUE=''
USE_DORA_FALSE=''
USE_DORA_TRUE=''
USE_FLUSHER_FALSE=''
USE_FLUSHER_TRUE=''
USE_HACK_FALSE=''
USE_HACK_TRUE=''
USE_QPIPE_FALSE=''
USE_QPIPE_TRUE=''
USE_SHORE_6_FALSE=''
USE_SHORE_6_TRUE=''
USE_SIMICS_FALSE=''
USE_SIMICS_TRUE=''
USE_VTUNE_FALSE=''
USE_VTUNE_TRUE=''
VERSION='2.1'
ac_ct_CXX='g++'
am__EXEEXT_FALSE=''
am__EXEEXT_TRUE=''
am__fastdepCXX_FALSE='#'
am__fastdepCXX_TRUE=''
am__include='include'
am__isrc=''
am__leading_dot='.'
am__nodep='_no'
am__quote=''
am__tar='$${TAR-tar} chof - "$$tardir"'
am__untar='$${TAR-tar} xf -'
bindir='${exec_prefix}/bin'
build='x86_64-pc-linux-gnu'
build_alias=''
build_cpu='x86_64'
build_os='linux-gnu'
build_vendor='pc'
datadir='${datarootdir}'
datarootdir='${prefix}/share'
docdir='${datarootdir}/doc/${PACKAGE_TARNAME}'
dvidir='${docdir}'
exec_prefix='NONE'
host='x86_64-pc-linux-gnu'
host_alias=''
host_cpu='x86_64'
host_os='linux-gnu'
host_vendor='pc'
htmldir='${docdir}'
includedir='${prefix}/include'
infodir='${datarootdir}/info'
install_sh='${SHELL} /home/wjy/SComet/benchmarks/Tailbench/tailbench/shore/shore-kits/install-sh'
libdir='${exec_prefix}/lib'
libexecdir='${exec_prefix}/libexec'
localedir='${datarootdir}/locale'
localstatedir='${prefix}/var'
mandir='${datarootdir}/man'
mkdir_p='$(MKDIR_P)'
oldincludedir='/usr/include'
pdfdir='${docdir}'
prefix='NONE'
program_transform_name='s,x,x,'
psdir='${docdir}'
runstatedir='${localstatedir}/run'
sbindir='${exec_prefix}/sbin'
sharedstatedir='${prefix}/com'
sysconfdir='${prefix}/etc'
target='x86_64-pc-linux-gnu'
target_alias=''
target_cpu='x86_64'
target_os='linux-gnu'
target_vendor='pc'

## ----------- ##
## confdefs.h. ##
## ----------- ##

/* confdefs.h */
#define PACKAGE_NAME "THIS_IS_SHORE_KITS"
#define PACKAGE_TARNAME "this_is_shore_kits"
#define PACKAGE_VERSION "2.1"
#define PACKAGE_STRING "THIS_IS_SHORE_KITS 2.1"
#define PACKAGE_BUGREPORT ""
#define PACKAGE_URL ""
#define PACKAGE "this_is_shore_kits"
#define VERSION "2.1"

configure: exit 1
